
OLED1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002a94  00400000  00400000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  00402a94  00402a94  00012a94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     0000044c  20400000  00402a9c  00020000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          000002cc  2040044c  00402ee8  0002044c  2**2
                  ALLOC
  4 .stack        00002000  20400718  004031b4  0002044c  2**0
                  ALLOC
  5 .heap         00000200  20402718  004051b4  0002044c  2**0
                  ALLOC
  6 .ARM.attributes 0000002e  00000000  00000000  0002044c  2**0
                  CONTENTS, READONLY
  7 .comment      00000059  00000000  00000000  0002047a  2**0
                  CONTENTS, READONLY
  8 .debug_info   00016ec6  00000000  00000000  000204d3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 0000338f  00000000  00000000  00037399  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00005579  00000000  00000000  0003a728  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 000007f0  00000000  00000000  0003fca1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000008a8  00000000  00000000  00040491  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00020cdd  00000000  00000000  00040d39  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0000dedd  00000000  00000000  00061a16  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    0008fdc3  00000000  00000000  0006f8f3  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  000013a0  00000000  00000000  000ff6b8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <exception_table>:
  400000:	18 27 40 20 69 11 40 00 65 11 40 00 65 11 40 00     .'@ i.@.e.@.e.@.
  400010:	65 11 40 00 65 11 40 00 65 11 40 00 00 00 00 00     e.@.e.@.e.@.....
	...
  40002c:	65 11 40 00 65 11 40 00 00 00 00 00 65 11 40 00     e.@.e.@.....e.@.
  40003c:	65 11 40 00 65 11 40 00 65 11 40 00 65 11 40 00     e.@.e.@.e.@.e.@.
  40004c:	65 11 40 00 65 11 40 00 65 11 40 00 65 11 40 00     e.@.e.@.e.@.e.@.
  40005c:	65 11 40 00 65 11 40 00 00 00 00 00 c9 0c 40 00     e.@.e.@.......@.
  40006c:	dd 0c 40 00 f1 0c 40 00 65 11 40 00 65 11 40 00     ..@...@.e.@.e.@.
  40007c:	65 11 40 00 05 0d 40 00 19 0d 40 00 65 11 40 00     e.@...@...@.e.@.
  40008c:	65 11 40 00 65 11 40 00 65 11 40 00 65 11 40 00     e.@.e.@.e.@.e.@.
  40009c:	65 11 40 00 65 11 40 00 65 11 40 00 65 11 40 00     e.@.e.@.e.@.e.@.
  4000ac:	65 11 40 00 65 11 40 00 65 11 40 00 65 11 40 00     e.@.e.@.e.@.e.@.
  4000bc:	65 11 40 00 65 11 40 00 65 11 40 00 65 11 40 00     e.@.e.@.e.@.e.@.
  4000cc:	65 11 40 00 00 00 00 00 65 11 40 00 00 00 00 00     e.@.....e.@.....
  4000dc:	65 11 40 00 65 11 40 00 65 11 40 00 65 11 40 00     e.@.e.@.e.@.e.@.
  4000ec:	65 11 40 00 65 11 40 00 65 11 40 00 65 11 40 00     e.@.e.@.e.@.e.@.
  4000fc:	65 11 40 00 65 11 40 00 65 11 40 00 65 11 40 00     e.@.e.@.e.@.e.@.
  40010c:	65 11 40 00 65 11 40 00 00 00 00 00 00 00 00 00     e.@.e.@.........
  40011c:	00 00 00 00 65 11 40 00 65 11 40 00 65 11 40 00     ....e.@.e.@.e.@.
  40012c:	65 11 40 00 65 11 40 00 00 00 00 00 65 11 40 00     e.@.e.@.....e.@.
  40013c:	65 11 40 00                                         e.@.

00400140 <__do_global_dtors_aux>:
  400140:	b510      	push	{r4, lr}
  400142:	4c05      	ldr	r4, [pc, #20]	; (400158 <__do_global_dtors_aux+0x18>)
  400144:	7823      	ldrb	r3, [r4, #0]
  400146:	b933      	cbnz	r3, 400156 <__do_global_dtors_aux+0x16>
  400148:	4b04      	ldr	r3, [pc, #16]	; (40015c <__do_global_dtors_aux+0x1c>)
  40014a:	b113      	cbz	r3, 400152 <__do_global_dtors_aux+0x12>
  40014c:	4804      	ldr	r0, [pc, #16]	; (400160 <__do_global_dtors_aux+0x20>)
  40014e:	f3af 8000 	nop.w
  400152:	2301      	movs	r3, #1
  400154:	7023      	strb	r3, [r4, #0]
  400156:	bd10      	pop	{r4, pc}
  400158:	2040044c 	.word	0x2040044c
  40015c:	00000000 	.word	0x00000000
  400160:	00402a9c 	.word	0x00402a9c

00400164 <frame_dummy>:
  400164:	4b0c      	ldr	r3, [pc, #48]	; (400198 <frame_dummy+0x34>)
  400166:	b143      	cbz	r3, 40017a <frame_dummy+0x16>
  400168:	480c      	ldr	r0, [pc, #48]	; (40019c <frame_dummy+0x38>)
  40016a:	490d      	ldr	r1, [pc, #52]	; (4001a0 <frame_dummy+0x3c>)
  40016c:	b510      	push	{r4, lr}
  40016e:	f3af 8000 	nop.w
  400172:	480c      	ldr	r0, [pc, #48]	; (4001a4 <frame_dummy+0x40>)
  400174:	6803      	ldr	r3, [r0, #0]
  400176:	b923      	cbnz	r3, 400182 <frame_dummy+0x1e>
  400178:	bd10      	pop	{r4, pc}
  40017a:	480a      	ldr	r0, [pc, #40]	; (4001a4 <frame_dummy+0x40>)
  40017c:	6803      	ldr	r3, [r0, #0]
  40017e:	b933      	cbnz	r3, 40018e <frame_dummy+0x2a>
  400180:	4770      	bx	lr
  400182:	4b09      	ldr	r3, [pc, #36]	; (4001a8 <frame_dummy+0x44>)
  400184:	2b00      	cmp	r3, #0
  400186:	d0f7      	beq.n	400178 <frame_dummy+0x14>
  400188:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  40018c:	4718      	bx	r3
  40018e:	4b06      	ldr	r3, [pc, #24]	; (4001a8 <frame_dummy+0x44>)
  400190:	2b00      	cmp	r3, #0
  400192:	d0f5      	beq.n	400180 <frame_dummy+0x1c>
  400194:	4718      	bx	r3
  400196:	bf00      	nop
  400198:	00000000 	.word	0x00000000
  40019c:	00402a9c 	.word	0x00402a9c
  4001a0:	20400450 	.word	0x20400450
  4001a4:	00402a9c 	.word	0x00402a9c
  4001a8:	00000000 	.word	0x00000000

004001ac <spi_enable_clock>:
 * \brief Enable SPI clock.
 *
 * \param p_spi Pointer to an SPI instance.
 */
void spi_enable_clock(Spi *p_spi)
{
  4001ac:	b508      	push	{r3, lr}
#if (SAM4S || SAM3S || SAM3N || SAM3U || SAM4E || SAM4N || SAMG51|| SAMG53|| SAMG54)
	UNUSED(p_spi);
	sysclk_enable_peripheral_clock(ID_SPI);
#elif (SAM3XA || SAM4C || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	if (p_spi == SPI0) {
  4001ae:	4b07      	ldr	r3, [pc, #28]	; (4001cc <spi_enable_clock+0x20>)
  4001b0:	4298      	cmp	r0, r3
  4001b2:	d003      	beq.n	4001bc <spi_enable_clock+0x10>
		sysclk_enable_peripheral_clock(ID_SPI0);
	}
	#ifdef SPI1
	else if (p_spi == SPI1) {
  4001b4:	4b06      	ldr	r3, [pc, #24]	; (4001d0 <spi_enable_clock+0x24>)
  4001b6:	4298      	cmp	r0, r3
  4001b8:	d004      	beq.n	4001c4 <spi_enable_clock+0x18>
  4001ba:	bd08      	pop	{r3, pc}
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
  4001bc:	2015      	movs	r0, #21
  4001be:	4b05      	ldr	r3, [pc, #20]	; (4001d4 <spi_enable_clock+0x28>)
  4001c0:	4798      	blx	r3
  4001c2:	bd08      	pop	{r3, pc}
  4001c4:	202a      	movs	r0, #42	; 0x2a
  4001c6:	4b03      	ldr	r3, [pc, #12]	; (4001d4 <spi_enable_clock+0x28>)
  4001c8:	4798      	blx	r3
	}
	#endif
#elif SAM4L
	sysclk_enable_peripheral_clock(p_spi);
#endif
}
  4001ca:	e7f6      	b.n	4001ba <spi_enable_clock+0xe>
  4001cc:	40008000 	.word	0x40008000
  4001d0:	40058000 	.word	0x40058000
  4001d4:	00400e4d 	.word	0x00400e4d

004001d8 <spi_set_peripheral_chip_select_value>:
 *                 \ref spi_enable_peripheral_select_decode,
 *                 \ref spi_disable_peripheral_select_decode.
 */
void spi_set_peripheral_chip_select_value(Spi *p_spi, uint32_t ul_value)
{
	p_spi->SPI_MR &= (~SPI_MR_PCS_Msk);
  4001d8:	6843      	ldr	r3, [r0, #4]
  4001da:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
  4001de:	6043      	str	r3, [r0, #4]
	p_spi->SPI_MR |= SPI_MR_PCS(ul_value);
  4001e0:	6843      	ldr	r3, [r0, #4]
  4001e2:	0409      	lsls	r1, r1, #16
  4001e4:	f401 2170 	and.w	r1, r1, #983040	; 0xf0000
  4001e8:	4319      	orrs	r1, r3
  4001ea:	6041      	str	r1, [r0, #4]
  4001ec:	4770      	bx	lr

004001ee <spi_write>:
 * \retval SPI_OK on Success.
 * \retval SPI_ERROR_TIMEOUT on Time-out.
 */
spi_status_t spi_write(Spi *p_spi, uint16_t us_data,
		uint8_t uc_pcs, uint8_t uc_last)
{
  4001ee:	b430      	push	{r4, r5}
	uint32_t timeout = SPI_TIMEOUT;
	uint32_t value;

	while (!(p_spi->SPI_SR & SPI_SR_TDRE)) {
  4001f0:	f643 2499 	movw	r4, #15001	; 0x3a99
  4001f4:	6905      	ldr	r5, [r0, #16]
  4001f6:	f015 0f02 	tst.w	r5, #2
  4001fa:	d103      	bne.n	400204 <spi_write+0x16>
		if (!timeout--) {
  4001fc:	3c01      	subs	r4, #1
  4001fe:	d1f9      	bne.n	4001f4 <spi_write+0x6>
			return SPI_ERROR_TIMEOUT;
  400200:	2001      	movs	r0, #1
  400202:	e00c      	b.n	40021e <spi_write+0x30>
 *
 * \return 1 for Variable mode, 0 for fixed mode.
 */
static inline uint32_t spi_get_peripheral_select_mode(Spi *p_spi)
{
	if (p_spi->SPI_MR & SPI_MR_PS) {
  400204:	6844      	ldr	r4, [r0, #4]
		}
	}

	if (spi_get_peripheral_select_mode(p_spi)) {
  400206:	f014 0f02 	tst.w	r4, #2
  40020a:	d006      	beq.n	40021a <spi_write+0x2c>
		value = SPI_TDR_TD(us_data) | SPI_TDR_PCS(uc_pcs);
  40020c:	0412      	lsls	r2, r2, #16
  40020e:	f402 2270 	and.w	r2, r2, #983040	; 0xf0000
  400212:	4311      	orrs	r1, r2
		if (uc_last) {
  400214:	b10b      	cbz	r3, 40021a <spi_write+0x2c>
			value |= SPI_TDR_LASTXFER;
  400216:	f041 7180 	orr.w	r1, r1, #16777216	; 0x1000000
		}
	} else {
		value = SPI_TDR_TD(us_data);
	}

	p_spi->SPI_TDR = value;
  40021a:	60c1      	str	r1, [r0, #12]

	return SPI_OK;
  40021c:	2000      	movs	r0, #0
}
  40021e:	bc30      	pop	{r4, r5}
  400220:	4770      	bx	lr

00400222 <spi_set_clock_polarity>:
 * \param ul_polarity Default clock state is logical one(high)/zero(low).
 */
void spi_set_clock_polarity(Spi *p_spi, uint32_t ul_pcs_ch,
		uint32_t ul_polarity)
{
	if (ul_polarity) {
  400222:	b932      	cbnz	r2, 400232 <spi_set_clock_polarity+0x10>
  400224:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CPOL;
	} else {
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CPOL);
  400228:	6b03      	ldr	r3, [r0, #48]	; 0x30
  40022a:	f023 0301 	bic.w	r3, r3, #1
  40022e:	6303      	str	r3, [r0, #48]	; 0x30
  400230:	4770      	bx	lr
  400232:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CPOL;
  400236:	6b03      	ldr	r3, [r0, #48]	; 0x30
  400238:	f043 0301 	orr.w	r3, r3, #1
  40023c:	6303      	str	r3, [r0, #48]	; 0x30
  40023e:	4770      	bx	lr

00400240 <spi_set_clock_phase>:
 *  \param ul_pcs_ch Peripheral Chip Select channel (0~3).
 *  \param ul_phase Data capture on the rising/falling edge of clock.
 */
void spi_set_clock_phase(Spi *p_spi, uint32_t ul_pcs_ch, uint32_t ul_phase)
{
	if (ul_phase) {
  400240:	b932      	cbnz	r2, 400250 <spi_set_clock_phase+0x10>
  400242:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_NCPHA;
	} else {
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_NCPHA);
  400246:	6b03      	ldr	r3, [r0, #48]	; 0x30
  400248:	f023 0302 	bic.w	r3, r3, #2
  40024c:	6303      	str	r3, [r0, #48]	; 0x30
  40024e:	4770      	bx	lr
  400250:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_NCPHA;
  400254:	6b03      	ldr	r3, [r0, #48]	; 0x30
  400256:	f043 0302 	orr.w	r3, r3, #2
  40025a:	6303      	str	r3, [r0, #48]	; 0x30
  40025c:	4770      	bx	lr

0040025e <spi_configure_cs_behavior>:
 * \param ul_cs_behavior Behavior of the Chip Select after transfer.
 */
void spi_configure_cs_behavior(Spi *p_spi, uint32_t ul_pcs_ch,
		uint32_t ul_cs_behavior)
{
	if (ul_cs_behavior == SPI_CS_RISE_FORCED) {
  40025e:	2a04      	cmp	r2, #4
  400260:	d003      	beq.n	40026a <spi_configure_cs_behavior+0xc>
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSAAT);
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CSNAAT;
	} else if (ul_cs_behavior == SPI_CS_RISE_NO_TX) {
  400262:	b16a      	cbz	r2, 400280 <spi_configure_cs_behavior+0x22>
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSAAT);
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSNAAT);
	} else if (ul_cs_behavior == SPI_CS_KEEP_LOW) {
  400264:	2a08      	cmp	r2, #8
  400266:	d016      	beq.n	400296 <spi_configure_cs_behavior+0x38>
  400268:	4770      	bx	lr
  40026a:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSAAT);
  40026e:	6b03      	ldr	r3, [r0, #48]	; 0x30
  400270:	f023 0308 	bic.w	r3, r3, #8
  400274:	6303      	str	r3, [r0, #48]	; 0x30
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CSNAAT;
  400276:	6b03      	ldr	r3, [r0, #48]	; 0x30
  400278:	f043 0304 	orr.w	r3, r3, #4
  40027c:	6303      	str	r3, [r0, #48]	; 0x30
  40027e:	4770      	bx	lr
  400280:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSAAT);
  400284:	6b03      	ldr	r3, [r0, #48]	; 0x30
  400286:	f023 0308 	bic.w	r3, r3, #8
  40028a:	6303      	str	r3, [r0, #48]	; 0x30
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSNAAT);
  40028c:	6b03      	ldr	r3, [r0, #48]	; 0x30
  40028e:	f023 0304 	bic.w	r3, r3, #4
  400292:	6303      	str	r3, [r0, #48]	; 0x30
  400294:	4770      	bx	lr
  400296:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CSAAT;
  40029a:	6b03      	ldr	r3, [r0, #48]	; 0x30
  40029c:	f043 0308 	orr.w	r3, r3, #8
  4002a0:	6303      	str	r3, [r0, #48]	; 0x30
	}
}
  4002a2:	e7e1      	b.n	400268 <spi_configure_cs_behavior+0xa>

004002a4 <spi_set_bits_per_transfer>:
 * \param ul_bits Number of bits (8~16), use the pattern defined
 *        in the device header file.
 */
void spi_set_bits_per_transfer(Spi *p_spi, uint32_t ul_pcs_ch,
		uint32_t ul_bits)
{
  4002a4:	eb00 0181 	add.w	r1, r0, r1, lsl #2
	p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_BITS_Msk);
  4002a8:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  4002aa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  4002ae:	630b      	str	r3, [r1, #48]	; 0x30
	p_spi->SPI_CSR[ul_pcs_ch] |= ul_bits;
  4002b0:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  4002b2:	431a      	orrs	r2, r3
  4002b4:	630a      	str	r2, [r1, #48]	; 0x30
  4002b6:	4770      	bx	lr

004002b8 <spi_calc_baudrate_div>:
 *   \retval > 0  Success.
 *   \retval < 0  Error.
 */
int16_t spi_calc_baudrate_div(const uint32_t baudrate, uint32_t mck)
{
	int baud_div = div_ceil(mck, baudrate);
  4002b8:	1e43      	subs	r3, r0, #1
  4002ba:	4419      	add	r1, r3
  4002bc:	fbb1 f0f0 	udiv	r0, r1, r0

	/* The value of baud_div is from 1 to 255 in the SCBR field. */
	if (baud_div <= 0 || baud_div > 255) {
  4002c0:	1e43      	subs	r3, r0, #1
  4002c2:	2bfe      	cmp	r3, #254	; 0xfe
		return -1;
	}

	return baud_div;
  4002c4:	bf94      	ite	ls
  4002c6:	b200      	sxthls	r0, r0
		return -1;
  4002c8:	f04f 30ff 	movhi.w	r0, #4294967295
}
  4002cc:	4770      	bx	lr

004002ce <spi_set_baudrate_div>:
 */
int16_t spi_set_baudrate_div(Spi *p_spi, uint32_t ul_pcs_ch,
		uint8_t uc_baudrate_divider)
{
    /* Programming the SCBR field to 0 is forbidden */
    if (!uc_baudrate_divider)
  4002ce:	b17a      	cbz	r2, 4002f0 <spi_set_baudrate_div+0x22>
{
  4002d0:	b410      	push	{r4}
  4002d2:	4614      	mov	r4, r2
  4002d4:	eb00 0181 	add.w	r1, r0, r1, lsl #2
        return -1;

	p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_SCBR_Msk);
  4002d8:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  4002da:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
  4002de:	630b      	str	r3, [r1, #48]	; 0x30
	p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_SCBR(uc_baudrate_divider);
  4002e0:	6b0a      	ldr	r2, [r1, #48]	; 0x30
  4002e2:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
  4002e6:	630a      	str	r2, [r1, #48]	; 0x30
    return 0;
  4002e8:	2000      	movs	r0, #0
}
  4002ea:	f85d 4b04 	ldr.w	r4, [sp], #4
  4002ee:	4770      	bx	lr
        return -1;
  4002f0:	f04f 30ff 	mov.w	r0, #4294967295
  4002f4:	4770      	bx	lr
	...

004002f8 <gfx_mono_set_framebuffer>:
	gfx_mono_set_framebuffer(framebuffer);
\endcode
 */
void gfx_mono_set_framebuffer(uint8_t *framebuffer)
{
	fbpointer = framebuffer;
  4002f8:	4b01      	ldr	r3, [pc, #4]	; (400300 <gfx_mono_set_framebuffer+0x8>)
  4002fa:	6018      	str	r0, [r3, #0]
  4002fc:	4770      	bx	lr
  4002fe:	bf00      	nop
  400300:	20400468 	.word	0x20400468

00400304 <gfx_mono_framebuffer_put_byte>:
\endcode
 */
void gfx_mono_framebuffer_put_byte(gfx_coord_t page, gfx_coord_t column,
		uint8_t data)
{
	*(fbpointer + (page * GFX_MONO_LCD_WIDTH) + column) = data;
  400304:	4b02      	ldr	r3, [pc, #8]	; (400310 <gfx_mono_framebuffer_put_byte+0xc>)
  400306:	681b      	ldr	r3, [r3, #0]
  400308:	eb03 10c0 	add.w	r0, r3, r0, lsl #7
  40030c:	5442      	strb	r2, [r0, r1]
  40030e:	4770      	bx	lr
  400310:	20400468 	.word	0x20400468

00400314 <gfx_mono_framebuffer_get_byte>:
	data = gfx_mono_framebuffer_get_byte(0, 0);
\endcode
 */
uint8_t gfx_mono_framebuffer_get_byte(gfx_coord_t page, gfx_coord_t column)
{
	return *(fbpointer + (page * GFX_MONO_LCD_WIDTH) + column);
  400314:	4b02      	ldr	r3, [pc, #8]	; (400320 <gfx_mono_framebuffer_get_byte+0xc>)
  400316:	681b      	ldr	r3, [r3, #0]
  400318:	eb03 10c0 	add.w	r0, r3, r0, lsl #7
}
  40031c:	5c40      	ldrb	r0, [r0, r1]
  40031e:	4770      	bx	lr
  400320:	20400468 	.word	0x20400468

00400324 <gfx_mono_generic_draw_horizontal_line>:
 * \param[in]  length     Length of the line in pixels.
 * \param[in]  color      Pixel operation of the line.
 */
void gfx_mono_generic_draw_horizontal_line(gfx_coord_t x, gfx_coord_t y,
		gfx_coord_t length, enum gfx_mono_color color)
{
  400324:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	uint8_t page;
	uint8_t pixelmask;
	uint8_t temp;

	/* Clip line length if too long */
	if (x + length > GFX_MONO_LCD_WIDTH) {
  400328:	1884      	adds	r4, r0, r2
  40032a:	2c80      	cmp	r4, #128	; 0x80
  40032c:	dd02      	ble.n	400334 <gfx_mono_generic_draw_horizontal_line+0x10>
		length = GFX_MONO_LCD_WIDTH - x;
  40032e:	f1c0 0480 	rsb	r4, r0, #128	; 0x80
  400332:	b2e2      	uxtb	r2, r4
	}

	page = y / 8;
	pixelmask = (1 << (y - (page * 8)));

	if (length == 0) {
  400334:	b322      	cbz	r2, 400380 <gfx_mono_generic_draw_horizontal_line+0x5c>
	page = y / 8;
  400336:	08cd      	lsrs	r5, r1, #3
	pixelmask = (1 << (y - (page * 8)));
  400338:	eba1 01c5 	sub.w	r1, r1, r5, lsl #3
  40033c:	2601      	movs	r6, #1
  40033e:	fa06 f101 	lsl.w	r1, r6, r1
  400342:	b2ce      	uxtb	r6, r1
		/* Nothing to do. Move along. */
		return;
	}

	switch (color) {
  400344:	2b01      	cmp	r3, #1
  400346:	d01d      	beq.n	400384 <gfx_mono_generic_draw_horizontal_line+0x60>
  400348:	2b00      	cmp	r3, #0
  40034a:	d035      	beq.n	4003b8 <gfx_mono_generic_draw_horizontal_line+0x94>
  40034c:	2b02      	cmp	r3, #2
  40034e:	d117      	bne.n	400380 <gfx_mono_generic_draw_horizontal_line+0x5c>
  400350:	3801      	subs	r0, #1
  400352:	b2c7      	uxtb	r7, r0
  400354:	19d4      	adds	r4, r2, r7
  400356:	b2e4      	uxtb	r4, r4
		}
		break;

	case GFX_PIXEL_XOR:
		while (length-- > 0) {
			temp = gfx_mono_get_byte(page, x + length);
  400358:	f8df a090 	ldr.w	sl, [pc, #144]	; 4003ec <gfx_mono_generic_draw_horizontal_line+0xc8>
			temp ^= pixelmask;
			gfx_mono_put_byte(page, x + length, temp);
  40035c:	f04f 0900 	mov.w	r9, #0
  400360:	f8df 808c 	ldr.w	r8, [pc, #140]	; 4003f0 <gfx_mono_generic_draw_horizontal_line+0xcc>
			temp = gfx_mono_get_byte(page, x + length);
  400364:	4621      	mov	r1, r4
  400366:	4628      	mov	r0, r5
  400368:	47d0      	blx	sl
			temp ^= pixelmask;
  40036a:	ea86 0200 	eor.w	r2, r6, r0
			gfx_mono_put_byte(page, x + length, temp);
  40036e:	464b      	mov	r3, r9
  400370:	b2d2      	uxtb	r2, r2
  400372:	4621      	mov	r1, r4
  400374:	4628      	mov	r0, r5
  400376:	47c0      	blx	r8
  400378:	3c01      	subs	r4, #1
  40037a:	b2e4      	uxtb	r4, r4
		while (length-- > 0) {
  40037c:	42bc      	cmp	r4, r7
  40037e:	d1f1      	bne.n	400364 <gfx_mono_generic_draw_horizontal_line+0x40>
  400380:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  400384:	3801      	subs	r0, #1
  400386:	b2c7      	uxtb	r7, r0
  400388:	19d4      	adds	r4, r2, r7
  40038a:	b2e4      	uxtb	r4, r4
			temp = gfx_mono_get_byte(page, x + length);
  40038c:	f8df a05c 	ldr.w	sl, [pc, #92]	; 4003ec <gfx_mono_generic_draw_horizontal_line+0xc8>
			gfx_mono_put_byte(page, x + length, temp);
  400390:	f04f 0900 	mov.w	r9, #0
  400394:	f8df 8058 	ldr.w	r8, [pc, #88]	; 4003f0 <gfx_mono_generic_draw_horizontal_line+0xcc>
			temp = gfx_mono_get_byte(page, x + length);
  400398:	4621      	mov	r1, r4
  40039a:	4628      	mov	r0, r5
  40039c:	47d0      	blx	sl
			temp |= pixelmask;
  40039e:	ea46 0200 	orr.w	r2, r6, r0
			gfx_mono_put_byte(page, x + length, temp);
  4003a2:	464b      	mov	r3, r9
  4003a4:	b2d2      	uxtb	r2, r2
  4003a6:	4621      	mov	r1, r4
  4003a8:	4628      	mov	r0, r5
  4003aa:	47c0      	blx	r8
  4003ac:	3c01      	subs	r4, #1
  4003ae:	b2e4      	uxtb	r4, r4
		while (length-- > 0) {
  4003b0:	42bc      	cmp	r4, r7
  4003b2:	d1f1      	bne.n	400398 <gfx_mono_generic_draw_horizontal_line+0x74>
  4003b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4003b8:	3801      	subs	r0, #1
  4003ba:	b2c7      	uxtb	r7, r0
  4003bc:	19d4      	adds	r4, r2, r7
  4003be:	b2e4      	uxtb	r4, r4
			temp = gfx_mono_get_byte(page, x + length);
  4003c0:	f8df 8028 	ldr.w	r8, [pc, #40]	; 4003ec <gfx_mono_generic_draw_horizontal_line+0xc8>
			temp &= ~pixelmask;
  4003c4:	43ce      	mvns	r6, r1
			gfx_mono_put_byte(page, x + length, temp);
  4003c6:	f8df 9028 	ldr.w	r9, [pc, #40]	; 4003f0 <gfx_mono_generic_draw_horizontal_line+0xcc>
			temp = gfx_mono_get_byte(page, x + length);
  4003ca:	4621      	mov	r1, r4
  4003cc:	4628      	mov	r0, r5
  4003ce:	47c0      	blx	r8
			temp &= ~pixelmask;
  4003d0:	ea06 0200 	and.w	r2, r6, r0
			gfx_mono_put_byte(page, x + length, temp);
  4003d4:	2300      	movs	r3, #0
  4003d6:	b2d2      	uxtb	r2, r2
  4003d8:	4621      	mov	r1, r4
  4003da:	4628      	mov	r0, r5
  4003dc:	47c8      	blx	r9
  4003de:	3c01      	subs	r4, #1
  4003e0:	b2e4      	uxtb	r4, r4
		while (length-- > 0) {
  4003e2:	42bc      	cmp	r4, r7
  4003e4:	d1f1      	bne.n	4003ca <gfx_mono_generic_draw_horizontal_line+0xa6>
  4003e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4003ea:	bf00      	nop
  4003ec:	00400625 	.word	0x00400625
  4003f0:	00400521 	.word	0x00400521

004003f4 <gfx_mono_generic_draw_filled_rect>:
 * \param[in]  color       Pixel operation of the line
 */
void gfx_mono_generic_draw_filled_rect(gfx_coord_t x, gfx_coord_t y,
		gfx_coord_t width, gfx_coord_t height,
		enum gfx_mono_color color)
{
  4003f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  4003f8:	f89d 7020 	ldrb.w	r7, [sp, #32]
	if (height == 0) {
  4003fc:	b18b      	cbz	r3, 400422 <gfx_mono_generic_draw_filled_rect+0x2e>
  4003fe:	461c      	mov	r4, r3
  400400:	4690      	mov	r8, r2
  400402:	4606      	mov	r6, r0
  400404:	1e4d      	subs	r5, r1, #1
  400406:	b2ed      	uxtb	r5, r5
  400408:	442c      	add	r4, r5
  40040a:	b2e4      	uxtb	r4, r4
		/* Nothing to do. Move along. */
		return;
	}

	while (height-- > 0) {
		gfx_mono_draw_horizontal_line(x, y + height, width, color);
  40040c:	f8df 9018 	ldr.w	r9, [pc, #24]	; 400428 <gfx_mono_generic_draw_filled_rect+0x34>
  400410:	463b      	mov	r3, r7
  400412:	4642      	mov	r2, r8
  400414:	4621      	mov	r1, r4
  400416:	4630      	mov	r0, r6
  400418:	47c8      	blx	r9
  40041a:	3c01      	subs	r4, #1
  40041c:	b2e4      	uxtb	r4, r4
	while (height-- > 0) {
  40041e:	42ac      	cmp	r4, r5
  400420:	d1f6      	bne.n	400410 <gfx_mono_generic_draw_filled_rect+0x1c>
  400422:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  400426:	bf00      	nop
  400428:	00400325 	.word	0x00400325

0040042c <gfx_mono_draw_char>:
 * \param[in] y        Y coordinate on screen.
 * \param[in] font     Font to draw character in
 */
void gfx_mono_draw_char(const char c, const gfx_coord_t x, const gfx_coord_t y,
		const struct font *font)
{
  40042c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  400430:	b083      	sub	sp, #12
  400432:	4604      	mov	r4, r0
  400434:	4688      	mov	r8, r1
  400436:	4691      	mov	r9, r2
  400438:	469b      	mov	fp, r3
	gfx_mono_draw_filled_rect(x, y, font->width, font->height,
  40043a:	7a5b      	ldrb	r3, [r3, #9]
  40043c:	f89b 2008 	ldrb.w	r2, [fp, #8]
  400440:	2100      	movs	r1, #0
  400442:	9100      	str	r1, [sp, #0]
  400444:	4649      	mov	r1, r9
  400446:	4640      	mov	r0, r8
  400448:	4d21      	ldr	r5, [pc, #132]	; (4004d0 <gfx_mono_draw_char+0xa4>)
  40044a:	47a8      	blx	r5
			GFX_PIXEL_CLR);

	switch (font->type) {
  40044c:	f89b 3000 	ldrb.w	r3, [fp]
  400450:	b113      	cbz	r3, 400458 <gfx_mono_draw_char+0x2c>
	default:
		/* Unsupported mode, call assert */
		Assert(false);
		break;
	}
}
  400452:	b003      	add	sp, #12
  400454:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	char_row_size = font->width / CONFIG_FONT_PIXELS_PER_BYTE;
  400458:	f89b 2008 	ldrb.w	r2, [fp, #8]
  40045c:	08d3      	lsrs	r3, r2, #3
	if (font->width % CONFIG_FONT_PIXELS_PER_BYTE) {
  40045e:	f012 0f07 	tst.w	r2, #7
		char_row_size++;
  400462:	bf18      	it	ne
  400464:	3301      	addne	r3, #1
	glyph_data_offset = char_row_size * font->height *
  400466:	f89b a009 	ldrb.w	sl, [fp, #9]
			((uint8_t)ch - font->first_char);
  40046a:	f89b 700a 	ldrb.w	r7, [fp, #10]
  40046e:	1be7      	subs	r7, r4, r7
	glyph_data_offset = char_row_size * font->height *
  400470:	fb17 f70a 	smulbb	r7, r7, sl
  400474:	fb17 f703 	smulbb	r7, r7, r3
	glyph_data = font->data.progmem + glyph_data_offset;
  400478:	f8db 3004 	ldr.w	r3, [fp, #4]
  40047c:	fa13 f787 	uxtah	r7, r3, r7
  400480:	e01f      	b.n	4004c2 <gfx_mono_draw_char+0x96>
			glyph_byte <<= 1;
  400482:	0064      	lsls	r4, r4, #1
  400484:	b2e4      	uxtb	r4, r4
  400486:	3501      	adds	r5, #1
		for (i = 0; i < pixelsToDraw; i++) {
  400488:	b2eb      	uxtb	r3, r5
  40048a:	429e      	cmp	r6, r3
  40048c:	d910      	bls.n	4004b0 <gfx_mono_draw_char+0x84>
  40048e:	b2eb      	uxtb	r3, r5
  400490:	eb08 0003 	add.w	r0, r8, r3
  400494:	b2c0      	uxtb	r0, r0
			if (i % CONFIG_FONT_PIXELS_PER_BYTE == 0) {
  400496:	f013 0f07 	tst.w	r3, #7
				glyph_byte = PROGMEM_READ_BYTE(glyph_data);
  40049a:	bf08      	it	eq
  40049c:	f817 4b01 	ldrbeq.w	r4, [r7], #1
			if ((glyph_byte & 0x80)) {
  4004a0:	f014 0f80 	tst.w	r4, #128	; 0x80
  4004a4:	d0ed      	beq.n	400482 <gfx_mono_draw_char+0x56>
				gfx_mono_draw_pixel(inc_x, inc_y,
  4004a6:	2201      	movs	r2, #1
  4004a8:	4649      	mov	r1, r9
  4004aa:	4b0a      	ldr	r3, [pc, #40]	; (4004d4 <gfx_mono_draw_char+0xa8>)
  4004ac:	4798      	blx	r3
  4004ae:	e7e8      	b.n	400482 <gfx_mono_draw_char+0x56>
		inc_y += 1;
  4004b0:	f109 0901 	add.w	r9, r9, #1
  4004b4:	fa5f f989 	uxtb.w	r9, r9
		rows_left--;
  4004b8:	f10a 3aff 	add.w	sl, sl, #4294967295
	} while (rows_left > 0);
  4004bc:	f01a 0aff 	ands.w	sl, sl, #255	; 0xff
  4004c0:	d0c7      	beq.n	400452 <gfx_mono_draw_char+0x26>
		uint8_t pixelsToDraw = font->width;
  4004c2:	f89b 6008 	ldrb.w	r6, [fp, #8]
		for (i = 0; i < pixelsToDraw; i++) {
  4004c6:	2e00      	cmp	r6, #0
  4004c8:	d0f2      	beq.n	4004b0 <gfx_mono_draw_char+0x84>
  4004ca:	2500      	movs	r5, #0
  4004cc:	462c      	mov	r4, r5
  4004ce:	e7de      	b.n	40048e <gfx_mono_draw_char+0x62>
  4004d0:	004003f5 	.word	0x004003f5
  4004d4:	004005c1 	.word	0x004005c1

004004d8 <gfx_mono_draw_string>:
 * \param[in] y         Y coordinate on screen.
 * \param[in] font      Font to draw string in
 */
void gfx_mono_draw_string(const char *str, gfx_coord_t x, gfx_coord_t y,
		const struct font *font)
{
  4004d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  4004dc:	4604      	mov	r4, r0
  4004de:	4690      	mov	r8, r2
  4004e0:	461d      	mov	r5, r3
  4004e2:	4689      	mov	r9, r1
			x = start_of_string_position_x;
			y += font->height + 1;
		} else if (*str == '\r') {
			/* Skip '\r' characters. */
		} else {
			gfx_mono_draw_char(*str, x, y, font);
  4004e4:	4f0d      	ldr	r7, [pc, #52]	; (40051c <gfx_mono_draw_string+0x44>)
			x = start_of_string_position_x;
  4004e6:	460e      	mov	r6, r1
  4004e8:	e008      	b.n	4004fc <gfx_mono_draw_string+0x24>
			y += font->height + 1;
  4004ea:	7a6a      	ldrb	r2, [r5, #9]
  4004ec:	3201      	adds	r2, #1
  4004ee:	4442      	add	r2, r8
  4004f0:	fa5f f882 	uxtb.w	r8, r2
			x = start_of_string_position_x;
  4004f4:	46b1      	mov	r9, r6
			x += font->width;
		}
	} while (*(++str));
  4004f6:	f814 3f01 	ldrb.w	r3, [r4, #1]!
  4004fa:	b16b      	cbz	r3, 400518 <gfx_mono_draw_string+0x40>
		if (*str == '\n') {
  4004fc:	7820      	ldrb	r0, [r4, #0]
  4004fe:	280a      	cmp	r0, #10
  400500:	d0f3      	beq.n	4004ea <gfx_mono_draw_string+0x12>
		} else if (*str == '\r') {
  400502:	280d      	cmp	r0, #13
  400504:	d0f7      	beq.n	4004f6 <gfx_mono_draw_string+0x1e>
			gfx_mono_draw_char(*str, x, y, font);
  400506:	462b      	mov	r3, r5
  400508:	4642      	mov	r2, r8
  40050a:	4649      	mov	r1, r9
  40050c:	47b8      	blx	r7
			x += font->width;
  40050e:	7a2b      	ldrb	r3, [r5, #8]
  400510:	4499      	add	r9, r3
  400512:	fa5f f989 	uxtb.w	r9, r9
  400516:	e7ee      	b.n	4004f6 <gfx_mono_draw_string+0x1e>
}
  400518:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40051c:	0040042d 	.word	0x0040042d

00400520 <gfx_mono_ssd1306_put_byte>:
	gfx_mono_ssd1306_put_byte(0, 0, 0xFF, false);
\endcode
  */
 void gfx_mono_ssd1306_put_byte(gfx_coord_t page, gfx_coord_t column,
		uint8_t data, bool force)
{
  400520:	b570      	push	{r4, r5, r6, lr}
  400522:	4604      	mov	r4, r0
  400524:	460d      	mov	r5, r1
  400526:	4616      	mov	r6, r2
#ifdef CONFIG_SSD1306_FRAMEBUFFER
	if (!force && data == gfx_mono_framebuffer_get_byte(page, column)) {
  400528:	b91b      	cbnz	r3, 400532 <gfx_mono_ssd1306_put_byte+0x12>
  40052a:	4b0d      	ldr	r3, [pc, #52]	; (400560 <gfx_mono_ssd1306_put_byte+0x40>)
  40052c:	4798      	blx	r3
  40052e:	42b0      	cmp	r0, r6
  400530:	d015      	beq.n	40055e <gfx_mono_ssd1306_put_byte+0x3e>
		return;
	}
	gfx_mono_framebuffer_put_byte(page, column, data);
  400532:	4632      	mov	r2, r6
  400534:	4629      	mov	r1, r5
  400536:	4620      	mov	r0, r4
  400538:	4b0a      	ldr	r3, [pc, #40]	; (400564 <gfx_mono_ssd1306_put_byte+0x44>)
  40053a:	4798      	blx	r3
 * \param address the page address
 */
static inline void ssd1306_set_page_address(uint8_t address)
{
	// Make sure that the address is 4 bits (only 8 pages)
	address &= 0x0F;
  40053c:	f004 000f 	and.w	r0, r4, #15
	ssd1306_write_command(SSD1306_CMD_SET_PAGE_START_ADDRESS(address));
  400540:	f040 00b0 	orr.w	r0, r0, #176	; 0xb0
  400544:	4c08      	ldr	r4, [pc, #32]	; (400568 <gfx_mono_ssd1306_put_byte+0x48>)
  400546:	47a0      	blx	r4
 */
static inline void ssd1306_set_column_address(uint8_t address)
{
	// Make sure the address is 7 bits
	address &= 0x7F;
	ssd1306_write_command(SSD1306_CMD_COL_ADD_SET_MSB(address >> 4));
  400548:	f3c5 1002 	ubfx	r0, r5, #4, #3
  40054c:	f040 0010 	orr.w	r0, r0, #16
  400550:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_COL_ADD_SET_LSB(address & 0x0F));
  400552:	f005 000f 	and.w	r0, r5, #15
  400556:	47a0      	blx	r4
#endif

	ssd1306_set_page_address(page);
	ssd1306_set_column_address(column);

	ssd1306_write_data(data);
  400558:	4630      	mov	r0, r6
  40055a:	4b04      	ldr	r3, [pc, #16]	; (40056c <gfx_mono_ssd1306_put_byte+0x4c>)
  40055c:	4798      	blx	r3
  40055e:	bd70      	pop	{r4, r5, r6, pc}
  400560:	00400315 	.word	0x00400315
  400564:	00400305 	.word	0x00400305
  400568:	00400631 	.word	0x00400631
  40056c:	00400851 	.word	0x00400851

00400570 <gfx_mono_ssd1306_init>:
{
  400570:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	gfx_mono_set_framebuffer(framebuffer);
  400574:	480d      	ldr	r0, [pc, #52]	; (4005ac <gfx_mono_ssd1306_init+0x3c>)
  400576:	4b0e      	ldr	r3, [pc, #56]	; (4005b0 <gfx_mono_ssd1306_init+0x40>)
  400578:	4798      	blx	r3
	ssd1306_init();
  40057a:	4b0e      	ldr	r3, [pc, #56]	; (4005b4 <gfx_mono_ssd1306_init+0x44>)
  40057c:	4798      	blx	r3
 */
static inline void ssd1306_set_display_start_line_address(uint8_t address)
{
	// Make sure address is 6 bits
	address &= 0x3F;
	ssd1306_write_command(SSD1306_CMD_SET_DISPLAY_START_LINE(address));
  40057e:	2040      	movs	r0, #64	; 0x40
  400580:	4b0d      	ldr	r3, [pc, #52]	; (4005b8 <gfx_mono_ssd1306_init+0x48>)
  400582:	4798      	blx	r3
	for (page = 0; page < GFX_MONO_LCD_PAGES; page++) {
  400584:	2500      	movs	r5, #0
			gfx_mono_ssd1306_put_byte(page, column, 0x00, true);
  400586:	f04f 0801 	mov.w	r8, #1
  40058a:	462f      	mov	r7, r5
  40058c:	4e0b      	ldr	r6, [pc, #44]	; (4005bc <gfx_mono_ssd1306_init+0x4c>)
{
  40058e:	2400      	movs	r4, #0
			gfx_mono_ssd1306_put_byte(page, column, 0x00, true);
  400590:	4643      	mov	r3, r8
  400592:	463a      	mov	r2, r7
  400594:	b2e1      	uxtb	r1, r4
  400596:	4628      	mov	r0, r5
  400598:	47b0      	blx	r6
  40059a:	3401      	adds	r4, #1
		for (column = 0; column < GFX_MONO_LCD_WIDTH; column++) {
  40059c:	2c80      	cmp	r4, #128	; 0x80
  40059e:	d1f7      	bne.n	400590 <gfx_mono_ssd1306_init+0x20>
	for (page = 0; page < GFX_MONO_LCD_PAGES; page++) {
  4005a0:	3501      	adds	r5, #1
  4005a2:	b2ed      	uxtb	r5, r5
  4005a4:	2d04      	cmp	r5, #4
  4005a6:	d1f2      	bne.n	40058e <gfx_mono_ssd1306_init+0x1e>
  4005a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4005ac:	2040046c 	.word	0x2040046c
  4005b0:	004002f9 	.word	0x004002f9
  4005b4:	00400671 	.word	0x00400671
  4005b8:	00400631 	.word	0x00400631
  4005bc:	00400521 	.word	0x00400521

004005c0 <gfx_mono_ssd1306_draw_pixel>:
	if ((x > GFX_MONO_LCD_WIDTH - 1) || (y > GFX_MONO_LCD_HEIGHT - 1)) {
  4005c0:	09c3      	lsrs	r3, r0, #7
  4005c2:	d12a      	bne.n	40061a <gfx_mono_ssd1306_draw_pixel+0x5a>
  4005c4:	291f      	cmp	r1, #31
  4005c6:	d828      	bhi.n	40061a <gfx_mono_ssd1306_draw_pixel+0x5a>
{
  4005c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4005cc:	4614      	mov	r4, r2
  4005ce:	4605      	mov	r5, r0
	page = y / GFX_MONO_LCD_PIXELS_PER_BYTE;
  4005d0:	08ce      	lsrs	r6, r1, #3
	pixel_mask = (1 << (y - (page * 8)));
  4005d2:	eba1 01c6 	sub.w	r1, r1, r6, lsl #3
  4005d6:	2201      	movs	r2, #1
  4005d8:	fa02 f701 	lsl.w	r7, r2, r1
  4005dc:	fa5f f887 	uxtb.w	r8, r7
\endcode
 */
uint8_t gfx_mono_ssd1306_get_byte(gfx_coord_t page, gfx_coord_t column)
{
#ifdef CONFIG_SSD1306_FRAMEBUFFER
	return gfx_mono_framebuffer_get_byte(page, column);
  4005e0:	4601      	mov	r1, r0
  4005e2:	4630      	mov	r0, r6
  4005e4:	4b0d      	ldr	r3, [pc, #52]	; (40061c <gfx_mono_ssd1306_draw_pixel+0x5c>)
  4005e6:	4798      	blx	r3
  4005e8:	4602      	mov	r2, r0
	switch (color) {
  4005ea:	2c01      	cmp	r4, #1
  4005ec:	d009      	beq.n	400602 <gfx_mono_ssd1306_draw_pixel+0x42>
  4005ee:	b164      	cbz	r4, 40060a <gfx_mono_ssd1306_draw_pixel+0x4a>
  4005f0:	2c02      	cmp	r4, #2
  4005f2:	d00e      	beq.n	400612 <gfx_mono_ssd1306_draw_pixel+0x52>
	gfx_mono_put_byte(page, x, pixel_value);
  4005f4:	2300      	movs	r3, #0
  4005f6:	4629      	mov	r1, r5
  4005f8:	4630      	mov	r0, r6
  4005fa:	4c09      	ldr	r4, [pc, #36]	; (400620 <gfx_mono_ssd1306_draw_pixel+0x60>)
  4005fc:	47a0      	blx	r4
  4005fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		pixel_value |= pixel_mask;
  400602:	ea48 0200 	orr.w	r2, r8, r0
  400606:	b2d2      	uxtb	r2, r2
		break;
  400608:	e7f4      	b.n	4005f4 <gfx_mono_ssd1306_draw_pixel+0x34>
		pixel_value &= ~pixel_mask;
  40060a:	ea20 0207 	bic.w	r2, r0, r7
  40060e:	b2d2      	uxtb	r2, r2
		break;
  400610:	e7f0      	b.n	4005f4 <gfx_mono_ssd1306_draw_pixel+0x34>
		pixel_value ^= pixel_mask;
  400612:	ea88 0200 	eor.w	r2, r8, r0
  400616:	b2d2      	uxtb	r2, r2
		break;
  400618:	e7ec      	b.n	4005f4 <gfx_mono_ssd1306_draw_pixel+0x34>
  40061a:	4770      	bx	lr
  40061c:	00400315 	.word	0x00400315
  400620:	00400521 	.word	0x00400521

00400624 <gfx_mono_ssd1306_get_byte>:
{
  400624:	b508      	push	{r3, lr}
	return gfx_mono_framebuffer_get_byte(page, column);
  400626:	4b01      	ldr	r3, [pc, #4]	; (40062c <gfx_mono_ssd1306_get_byte+0x8>)
  400628:	4798      	blx	r3
	ssd1306_set_column_address(column);

	return ssd1306_read_data();

#endif
}
  40062a:	bd08      	pop	{r3, pc}
  40062c:	00400315 	.word	0x00400315

00400630 <ssd1306_write_command>:
 * data write function is called based on the selected interface.
 *
 * \param command the command to write
 */
void ssd1306_write_command(uint8_t command)
{
  400630:	b538      	push	{r3, r4, r5, lr}
  400632:	4605      	mov	r5, r0
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  400634:	2208      	movs	r2, #8
  400636:	4b09      	ldr	r3, [pc, #36]	; (40065c <ssd1306_write_command+0x2c>)
  400638:	635a      	str	r2, [r3, #52]	; 0x34
	ioport_set_pin_level(SSD1306_DC_PIN, false);
	
	spi_set_peripheral_chip_select_value(SPI0, 1);
  40063a:	4c09      	ldr	r4, [pc, #36]	; (400660 <ssd1306_write_command+0x30>)
  40063c:	2101      	movs	r1, #1
  40063e:	4620      	mov	r0, r4
  400640:	4b08      	ldr	r3, [pc, #32]	; (400664 <ssd1306_write_command+0x34>)
  400642:	4798      	blx	r3
	spi_write(SPI0, command, 1, 1);
  400644:	2301      	movs	r3, #1
  400646:	461a      	mov	r2, r3
  400648:	4629      	mov	r1, r5
  40064a:	4620      	mov	r0, r4
  40064c:	4c06      	ldr	r4, [pc, #24]	; (400668 <ssd1306_write_command+0x38>)
  40064e:	47a0      	blx	r4
	delay_us(10);
  400650:	f44f 70fd 	mov.w	r0, #506	; 0x1fa
  400654:	4b05      	ldr	r3, [pc, #20]	; (40066c <ssd1306_write_command+0x3c>)
  400656:	4798      	blx	r3
  400658:	bd38      	pop	{r3, r4, r5, pc}
  40065a:	bf00      	nop
  40065c:	400e1000 	.word	0x400e1000
  400660:	40008000 	.word	0x40008000
  400664:	004001d9 	.word	0x004001d9
  400668:	004001ef 	.word	0x004001ef
  40066c:	20400001 	.word	0x20400001

00400670 <ssd1306_init>:
{
  400670:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  400674:	4d66      	ldr	r5, [pc, #408]	; (400810 <ssd1306_init+0x1a0>)
  400676:	f44f 3600 	mov.w	r6, #131072	; 0x20000
  40067a:	612e      	str	r6, [r5, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40067c:	f8c5 60a0 	str.w	r6, [r5, #160]	; 0xa0
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  400680:	4b64      	ldr	r3, [pc, #400]	; (400814 <ssd1306_init+0x1a4>)
  400682:	2708      	movs	r7, #8
  400684:	611f      	str	r7, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  400686:	f8c3 70a0 	str.w	r7, [r3, #160]	; 0xa0
		base->PIO_PUER = mask;
  40068a:	666e      	str	r6, [r5, #100]	; 0x64
		base->PIO_PPDDR = mask;
  40068c:	f8c5 6090 	str.w	r6, [r5, #144]	; 0x90
		base->PIO_MDDR = mask;
  400690:	656e      	str	r6, [r5, #84]	; 0x54
		base->PIO_IFDR = mask;
  400692:	626e      	str	r6, [r5, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  400694:	f8c5 6080 	str.w	r6, [r5, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  400698:	6f2a      	ldr	r2, [r5, #112]	; 0x70
  40069a:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
  40069e:	672a      	str	r2, [r5, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  4006a0:	6f6a      	ldr	r2, [r5, #116]	; 0x74
  4006a2:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
  4006a6:	676a      	str	r2, [r5, #116]	; 0x74
		base->PIO_PUER = mask;
  4006a8:	665f      	str	r7, [r3, #100]	; 0x64
		base->PIO_PPDDR = mask;
  4006aa:	f8c3 7090 	str.w	r7, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  4006ae:	655f      	str	r7, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  4006b0:	625f      	str	r7, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  4006b2:	f8c3 7080 	str.w	r7, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  4006b6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  4006b8:	f022 0208 	bic.w	r2, r2, #8
  4006bc:	671a      	str	r2, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  4006be:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  4006c0:	f022 0208 	bic.w	r2, r2, #8
  4006c4:	675a      	str	r2, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PER = mask;
  4006c6:	601f      	str	r7, [r3, #0]
  4006c8:	602e      	str	r6, [r5, #0]
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  4006ca:	631f      	str	r7, [r3, #48]	; 0x30
  4006cc:	632e      	str	r6, [r5, #48]	; 0x30
	pio_configure(PIOD, PIO_PERIPH_B, 1 << SPI_CLK_MASK, PIO_DEFAULT);
  4006ce:	f8df 817c 	ldr.w	r8, [pc, #380]	; 40084c <ssd1306_init+0x1dc>
  4006d2:	2300      	movs	r3, #0
  4006d4:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
  4006d8:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  4006dc:	4640      	mov	r0, r8
  4006de:	4c4e      	ldr	r4, [pc, #312]	; (400818 <ssd1306_init+0x1a8>)
  4006e0:	47a0      	blx	r4
	pio_configure(PIOD, PIO_PERIPH_B, 1 << SPI_MOSI_MASK, PIO_DEFAULT);
  4006e2:	2300      	movs	r3, #0
  4006e4:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
  4006e8:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  4006ec:	4640      	mov	r0, r8
  4006ee:	47a0      	blx	r4
	pio_configure(PIOD, PIO_PERIPH_B, 1 << SPI_CS_MASK, PIO_DEFAULT);
  4006f0:	2300      	movs	r3, #0
  4006f2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
  4006f6:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  4006fa:	4640      	mov	r0, r8
  4006fc:	47a0      	blx	r4
		pio_configure(PIOD, PIO_PERIPH_B, 1 << SPI_CLK_MASK, PIO_DEFAULT);
  4006fe:	2300      	movs	r3, #0
  400700:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
  400704:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  400708:	4640      	mov	r0, r8
  40070a:	47a0      	blx	r4
		pio_configure(PIOD, PIO_PERIPH_B, 1 << SPI_MOSI_MASK, PIO_DEFAULT);
  40070c:	2300      	movs	r3, #0
  40070e:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
  400712:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  400716:	4640      	mov	r0, r8
  400718:	47a0      	blx	r4
		pio_configure(PIOD, PIO_PERIPH_B, 1 << SPI_CS_MASK, PIO_DEFAULT);
  40071a:	2300      	movs	r3, #0
  40071c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
  400720:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  400724:	4640      	mov	r0, r8
  400726:	47a0      	blx	r4
	p_spi->SPI_CR = SPI_CR_SPIDIS;
  400728:	4c3c      	ldr	r4, [pc, #240]	; (40081c <ssd1306_init+0x1ac>)
  40072a:	f04f 0902 	mov.w	r9, #2
  40072e:	f8c4 9000 	str.w	r9, [r4]
	p_spi->SPI_CR = SPI_CR_SWRST;
  400732:	f04f 0880 	mov.w	r8, #128	; 0x80
  400736:	f8c4 8000 	str.w	r8, [r4]
	p_spi->SPI_MR |= SPI_MR_MSTR;
  40073a:	6863      	ldr	r3, [r4, #4]
  40073c:	f043 0301 	orr.w	r3, r3, #1
  400740:	6063      	str	r3, [r4, #4]
		spi_configure_cs_behavior(SPI0, 1, SPI_CS_KEEP_LOW);
  400742:	463a      	mov	r2, r7
  400744:	2101      	movs	r1, #1
  400746:	4620      	mov	r0, r4
  400748:	4b35      	ldr	r3, [pc, #212]	; (400820 <ssd1306_init+0x1b0>)
  40074a:	4798      	blx	r3
		spi_set_clock_polarity(SPI0, 1, 0);
  40074c:	2200      	movs	r2, #0
  40074e:	2101      	movs	r1, #1
  400750:	4620      	mov	r0, r4
  400752:	4b34      	ldr	r3, [pc, #208]	; (400824 <ssd1306_init+0x1b4>)
  400754:	4798      	blx	r3
		spi_set_clock_phase(SPI0, 1, 0);
  400756:	2200      	movs	r2, #0
  400758:	2101      	movs	r1, #1
  40075a:	4620      	mov	r0, r4
  40075c:	4b32      	ldr	r3, [pc, #200]	; (400828 <ssd1306_init+0x1b8>)
  40075e:	4798      	blx	r3
	p_spi->SPI_MR &= (~SPI_MR_PS);
  400760:	6863      	ldr	r3, [r4, #4]
  400762:	f023 0302 	bic.w	r3, r3, #2
  400766:	6063      	str	r3, [r4, #4]
		spi_set_bits_per_transfer(SPI0, 1, SPI_CSR_BITS_8_BIT);
  400768:	2200      	movs	r2, #0
  40076a:	2101      	movs	r1, #1
  40076c:	4620      	mov	r0, r4
  40076e:	4b2f      	ldr	r3, [pc, #188]	; (40082c <ssd1306_init+0x1bc>)
  400770:	4798      	blx	r3
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_disable_loopback(Spi *p_spi)
{
	p_spi->SPI_MR &= (~SPI_MR_LLB);
  400772:	6863      	ldr	r3, [r4, #4]
  400774:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  400778:	6063      	str	r3, [r4, #4]
	p_spi->SPI_MR |= SPI_MR_MODFDIS;
  40077a:	6863      	ldr	r3, [r4, #4]
  40077c:	f043 0310 	orr.w	r3, r3, #16
  400780:	6063      	str	r3, [r4, #4]
		int div = spi_calc_baudrate_div(1000000, sysclk_get_peripheral_hz());
  400782:	492b      	ldr	r1, [pc, #172]	; (400830 <ssd1306_init+0x1c0>)
  400784:	482b      	ldr	r0, [pc, #172]	; (400834 <ssd1306_init+0x1c4>)
  400786:	4b2c      	ldr	r3, [pc, #176]	; (400838 <ssd1306_init+0x1c8>)
  400788:	4798      	blx	r3
		spi_set_baudrate_div(SPI0,1, div);
  40078a:	b2c2      	uxtb	r2, r0
  40078c:	2101      	movs	r1, #1
  40078e:	4620      	mov	r0, r4
  400790:	4b2a      	ldr	r3, [pc, #168]	; (40083c <ssd1306_init+0x1cc>)
  400792:	4798      	blx	r3
		spi_enable_clock(SPI0);
  400794:	4620      	mov	r0, r4
  400796:	4b2a      	ldr	r3, [pc, #168]	; (400840 <ssd1306_init+0x1d0>)
  400798:	4798      	blx	r3
	p_spi->SPI_CR = SPI_CR_SPIEN;
  40079a:	2301      	movs	r3, #1
  40079c:	6023      	str	r3, [r4, #0]
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  40079e:	636e      	str	r6, [r5, #52]	; 0x34
	delay_cycles(delay_10us); // At lest 10us
  4007a0:	f640 30b8 	movw	r0, #3000	; 0xbb8
  4007a4:	4c27      	ldr	r4, [pc, #156]	; (400844 <ssd1306_init+0x1d4>)
  4007a6:	47a0      	blx	r4
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  4007a8:	632e      	str	r6, [r5, #48]	; 0x30
	delay_cycles(delay_10us); // At lest 10us
  4007aa:	f640 30b8 	movw	r0, #3000	; 0xbb8
  4007ae:	47a0      	blx	r4
  4007b0:	632e      	str	r6, [r5, #48]	; 0x30
	ssd1306_write_command(SSD1306_CMD_SET_MULTIPLEX_RATIO);
  4007b2:	20a8      	movs	r0, #168	; 0xa8
  4007b4:	4c24      	ldr	r4, [pc, #144]	; (400848 <ssd1306_init+0x1d8>)
  4007b6:	47a0      	blx	r4
	ssd1306_write_command(0x1F);
  4007b8:	201f      	movs	r0, #31
  4007ba:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_SET_DISPLAY_OFFSET);
  4007bc:	20d3      	movs	r0, #211	; 0xd3
  4007be:	47a0      	blx	r4
	ssd1306_write_command(0x00);
  4007c0:	2000      	movs	r0, #0
  4007c2:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_SET_DISPLAY_START_LINE(0x00));
  4007c4:	2040      	movs	r0, #64	; 0x40
  4007c6:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_SET_SEGMENT_RE_MAP_COL127_SEG0);
  4007c8:	20a1      	movs	r0, #161	; 0xa1
  4007ca:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_SET_COM_OUTPUT_SCAN_DOWN);
  4007cc:	20c8      	movs	r0, #200	; 0xc8
  4007ce:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_SET_COM_PINS);
  4007d0:	20da      	movs	r0, #218	; 0xda
  4007d2:	47a0      	blx	r4
	ssd1306_write_command(0x02);
  4007d4:	4648      	mov	r0, r9
  4007d6:	47a0      	blx	r4
 *
 * \retval contrast the contrast value written to the OLED controller
 */
static inline uint8_t ssd1306_set_contrast(uint8_t contrast)
{
	ssd1306_write_command(SSD1306_CMD_SET_CONTRAST_CONTROL_FOR_BANK0);
  4007d8:	2081      	movs	r0, #129	; 0x81
  4007da:	47a0      	blx	r4
	ssd1306_write_command(contrast);
  4007dc:	208f      	movs	r0, #143	; 0x8f
  4007de:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_ENTIRE_DISPLAY_AND_GDDRAM_ON);
  4007e0:	20a4      	movs	r0, #164	; 0xa4
  4007e2:	47a0      	blx	r4
 * This function will disable invert on all pixels on the OLED
 *
 */
static inline void ssd1306_display_invert_disable(void)
{
	ssd1306_write_command(SSD1306_CMD_SET_NORMAL_DISPLAY);
  4007e4:	20a6      	movs	r0, #166	; 0xa6
  4007e6:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_SET_DISPLAY_CLOCK_DIVIDE_RATIO);
  4007e8:	20d5      	movs	r0, #213	; 0xd5
  4007ea:	47a0      	blx	r4
	ssd1306_write_command(0x80);
  4007ec:	4640      	mov	r0, r8
  4007ee:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_SET_CHARGE_PUMP_SETTING);
  4007f0:	208d      	movs	r0, #141	; 0x8d
  4007f2:	47a0      	blx	r4
	ssd1306_write_command(0x14);
  4007f4:	2014      	movs	r0, #20
  4007f6:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_SET_VCOMH_DESELECT_LEVEL);
  4007f8:	20db      	movs	r0, #219	; 0xdb
  4007fa:	47a0      	blx	r4
	ssd1306_write_command(0x40); // Default => 0x20 (0.77*VCC)
  4007fc:	2040      	movs	r0, #64	; 0x40
  4007fe:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_SET_PRE_CHARGE_PERIOD);
  400800:	20d9      	movs	r0, #217	; 0xd9
  400802:	47a0      	blx	r4
	ssd1306_write_command(0xF1);
  400804:	20f1      	movs	r0, #241	; 0xf1
  400806:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_SET_DISPLAY_ON);
  400808:	20af      	movs	r0, #175	; 0xaf
  40080a:	47a0      	blx	r4
  40080c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  400810:	400e1200 	.word	0x400e1200
  400814:	400e1000 	.word	0x400e1000
  400818:	00400b39 	.word	0x00400b39
  40081c:	40008000 	.word	0x40008000
  400820:	0040025f 	.word	0x0040025f
  400824:	00400223 	.word	0x00400223
  400828:	00400241 	.word	0x00400241
  40082c:	004002a5 	.word	0x004002a5
  400830:	08f0d180 	.word	0x08f0d180
  400834:	000f4240 	.word	0x000f4240
  400838:	004002b9 	.word	0x004002b9
  40083c:	004002cf 	.word	0x004002cf
  400840:	004001ad 	.word	0x004001ad
  400844:	20400001 	.word	0x20400001
  400848:	00400631 	.word	0x00400631
  40084c:	400e1400 	.word	0x400e1400

00400850 <ssd1306_write_data>:
 * data write function is called based on the selected interface.
 *
 * \param data the data to write
 */
void ssd1306_write_data(uint8_t data)
{
  400850:	b538      	push	{r3, r4, r5, lr}
  400852:	4605      	mov	r5, r0
  400854:	2208      	movs	r2, #8
  400856:	4b09      	ldr	r3, [pc, #36]	; (40087c <ssd1306_write_data+0x2c>)
  400858:	631a      	str	r2, [r3, #48]	; 0x30
	ioport_set_pin_level(SSD1306_DC_PIN, true);
	
	spi_set_peripheral_chip_select_value(SPI0, 1);
  40085a:	4c09      	ldr	r4, [pc, #36]	; (400880 <ssd1306_write_data+0x30>)
  40085c:	2101      	movs	r1, #1
  40085e:	4620      	mov	r0, r4
  400860:	4b08      	ldr	r3, [pc, #32]	; (400884 <ssd1306_write_data+0x34>)
  400862:	4798      	blx	r3
	spi_write(SPI0, data, 1, 1);
  400864:	2301      	movs	r3, #1
  400866:	461a      	mov	r2, r3
  400868:	4629      	mov	r1, r5
  40086a:	4620      	mov	r0, r4
  40086c:	4c06      	ldr	r4, [pc, #24]	; (400888 <ssd1306_write_data+0x38>)
  40086e:	47a0      	blx	r4
	delay_us(10);
  400870:	f44f 70fd 	mov.w	r0, #506	; 0x1fa
  400874:	4b05      	ldr	r3, [pc, #20]	; (40088c <ssd1306_write_data+0x3c>)
  400876:	4798      	blx	r3
  400878:	bd38      	pop	{r3, r4, r5, pc}
  40087a:	bf00      	nop
  40087c:	400e1000 	.word	0x400e1000
  400880:	40008000 	.word	0x40008000
  400884:	004001d9 	.word	0x004001d9
  400888:	004001ef 	.word	0x004001ef
  40088c:	20400001 	.word	0x20400001

00400890 <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
  400890:	b510      	push	{r4, lr}
	struct pll_config pllcfg;

	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
  400892:	4810      	ldr	r0, [pc, #64]	; (4008d4 <sysclk_init+0x44>)
  400894:	4b10      	ldr	r3, [pc, #64]	; (4008d8 <sysclk_init+0x48>)
  400896:	4798      	blx	r3
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
  400898:	213e      	movs	r1, #62	; 0x3e
  40089a:	2000      	movs	r0, #0
  40089c:	4b0f      	ldr	r3, [pc, #60]	; (4008dc <sysclk_init+0x4c>)
  40089e:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
  4008a0:	4c0f      	ldr	r4, [pc, #60]	; (4008e0 <sysclk_init+0x50>)
  4008a2:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
  4008a4:	2800      	cmp	r0, #0
  4008a6:	d0fc      	beq.n	4008a2 <sysclk_init+0x12>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
  4008a8:	4b0e      	ldr	r3, [pc, #56]	; (4008e4 <sysclk_init+0x54>)
  4008aa:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
  4008ac:	4a0e      	ldr	r2, [pc, #56]	; (4008e8 <sysclk_init+0x58>)
  4008ae:	4b0f      	ldr	r3, [pc, #60]	; (4008ec <sysclk_init+0x5c>)
  4008b0:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
	return pmc_is_locked_pllack();
  4008b2:	4c0f      	ldr	r4, [pc, #60]	; (4008f0 <sysclk_init+0x60>)
  4008b4:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
  4008b6:	2800      	cmp	r0, #0
  4008b8:	d0fc      	beq.n	4008b4 <sysclk_init+0x24>
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
  4008ba:	2002      	movs	r0, #2
  4008bc:	4b0d      	ldr	r3, [pc, #52]	; (4008f4 <sysclk_init+0x64>)
  4008be:	4798      	blx	r3
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
  4008c0:	2000      	movs	r0, #0
  4008c2:	4b0d      	ldr	r3, [pc, #52]	; (4008f8 <sysclk_init+0x68>)
  4008c4:	4798      	blx	r3
		pll_wait_for_lock(1);
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}
	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
  4008c6:	4b0d      	ldr	r3, [pc, #52]	; (4008fc <sysclk_init+0x6c>)
  4008c8:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
  4008ca:	4802      	ldr	r0, [pc, #8]	; (4008d4 <sysclk_init+0x44>)
  4008cc:	4b02      	ldr	r3, [pc, #8]	; (4008d8 <sysclk_init+0x48>)
  4008ce:	4798      	blx	r3
  4008d0:	bd10      	pop	{r4, pc}
  4008d2:	bf00      	nop
  4008d4:	11e1a300 	.word	0x11e1a300
  4008d8:	0040133d 	.word	0x0040133d
  4008dc:	00400dc9 	.word	0x00400dc9
  4008e0:	00400e1d 	.word	0x00400e1d
  4008e4:	00400e2d 	.word	0x00400e2d
  4008e8:	20183f01 	.word	0x20183f01
  4008ec:	400e0600 	.word	0x400e0600
  4008f0:	00400e3d 	.word	0x00400e3d
  4008f4:	00400d2d 	.word	0x00400d2d
  4008f8:	00400d65 	.word	0x00400d65
  4008fc:	00401231 	.word	0x00401231

00400900 <board_init>:
	__ISB();
}
#endif

void board_init(void)
{
  400900:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
  400902:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  400906:	4b48      	ldr	r3, [pc, #288]	; (400a28 <board_init+0x128>)
  400908:	605a      	str	r2, [r3, #4]
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb");
  40090a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  40090e:	f3bf 8f6f 	isb	sy
__STATIC_INLINE void SCB_EnableICache(void)
{
  #if (__ICACHE_PRESENT == 1)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0;                       // invalidate I-Cache
  400912:	4b46      	ldr	r3, [pc, #280]	; (400a2c <board_init+0x12c>)
  400914:	2200      	movs	r2, #0
  400916:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
    SCB->CCR |=  SCB_CCR_IC_Msk;            // enable I-Cache
  40091a:	695a      	ldr	r2, [r3, #20]
  40091c:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
  400920:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb");
  400922:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  400926:	f3bf 8f6f 	isb	sy
{
  #if (__DCACHE_PRESENT == 1)
    uint32_t ccsidr, sshift, wshift, sw;
    uint32_t sets, ways;

    ccsidr  = SCB->CCSIDR;
  40092a:	f8d3 7080 	ldr.w	r7, [r3, #128]	; 0x80
    sets    = CCSIDR_SETS(ccsidr);
  40092e:	f3c7 364e 	ubfx	r6, r7, #13, #15
    sshift  = CCSIDR_LSSHIFT(ccsidr) + 4;
  400932:	f007 0007 	and.w	r0, r7, #7
  400936:	3004      	adds	r0, #4
    ways    = CCSIDR_WAYS(ccsidr);
  400938:	f3c7 07c9 	ubfx	r7, r7, #3, #10
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
  uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
  40093c:	fab7 fe87 	clz	lr, r7
    wshift  = __CLZ(ways) & 0x1f;
  400940:	f00e 0e1f 	and.w	lr, lr, #31
  __ASM volatile ("dsb");
  400944:	f3bf 8f4f 	dsb	sy
  400948:	f04f 34ff 	mov.w	r4, #4294967295
  40094c:	fa04 fc00 	lsl.w	ip, r4, r0
  400950:	fa06 f000 	lsl.w	r0, r6, r0
  400954:	fa04 f40e 	lsl.w	r4, r4, lr
  400958:	fa07 fe0e 	lsl.w	lr, r7, lr

    do {                                    // invalidate D-Cache
         int32_t tmpways = ways;
         do {
              sw = ((tmpways << wshift) | (sets << sshift));
              SCB->DCISW = sw;
  40095c:	461d      	mov	r5, r3
         int32_t tmpways = ways;
  40095e:	463a      	mov	r2, r7
  400960:	4673      	mov	r3, lr
              sw = ((tmpways << wshift) | (sets << sshift));
  400962:	ea40 0103 	orr.w	r1, r0, r3
              SCB->DCISW = sw;
  400966:	f8c5 1260 	str.w	r1, [r5, #608]	; 0x260
            } while(tmpways--);
  40096a:	3a01      	subs	r2, #1
  40096c:	4423      	add	r3, r4
  40096e:	f1b2 3fff 	cmp.w	r2, #4294967295
  400972:	d1f6      	bne.n	400962 <board_init+0x62>
        } while(sets--);
  400974:	3e01      	subs	r6, #1
  400976:	4460      	add	r0, ip
  400978:	f1b6 3fff 	cmp.w	r6, #4294967295
  40097c:	d1ef      	bne.n	40095e <board_init+0x5e>
  40097e:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  SCB_CCR_DC_Msk;            // enable D-Cache
  400982:	4b2a      	ldr	r3, [pc, #168]	; (400a2c <board_init+0x12c>)
  400984:	695a      	ldr	r2, [r3, #20]
  400986:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
  40098a:	615a      	str	r2, [r3, #20]
  40098c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  400990:	f3bf 8f6f 	isb	sy
		*dst++ = *src++;
	}
#endif
#else
	/* TCM Configuration */
	EFC->EEFC_FCR = (EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FCMD_CGPB 
  400994:	4a26      	ldr	r2, [pc, #152]	; (400a30 <board_init+0x130>)
  400996:	4927      	ldr	r1, [pc, #156]	; (400a34 <board_init+0x134>)
  400998:	6051      	str	r1, [r2, #4]
					| EEFC_FCR_FARG(8));
	EFC->EEFC_FCR = (EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FCMD_CGPB 
  40099a:	f5a1 7180 	sub.w	r1, r1, #256	; 0x100
  40099e:	6051      	str	r1, [r2, #4]
  __ASM volatile ("dsb");
  4009a0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  4009a4:	f3bf 8f6f 	isb	sy
	SCB->ITCMCR &= ~(uint32_t)(1UL);
  4009a8:	f8d3 2290 	ldr.w	r2, [r3, #656]	; 0x290
  4009ac:	f022 0201 	bic.w	r2, r2, #1
  4009b0:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290
	SCB->DTCMCR &= ~(uint32_t)SCB_DTCMCR_EN_Msk;
  4009b4:	f8d3 2294 	ldr.w	r2, [r3, #660]	; 0x294
  4009b8:	f022 0201 	bic.w	r2, r2, #1
  4009bc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  __ASM volatile ("dsb");
  4009c0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  4009c4:	f3bf 8f6f 	isb	sy
  4009c8:	200a      	movs	r0, #10
  4009ca:	4c1b      	ldr	r4, [pc, #108]	; (400a38 <board_init+0x138>)
  4009cc:	47a0      	blx	r4
  4009ce:	200b      	movs	r0, #11
  4009d0:	47a0      	blx	r4
  4009d2:	200c      	movs	r0, #12
  4009d4:	47a0      	blx	r4
  4009d6:	2010      	movs	r0, #16
  4009d8:	47a0      	blx	r4
  4009da:	2011      	movs	r0, #17
  4009dc:	47a0      	blx	r4
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  4009de:	4b17      	ldr	r3, [pc, #92]	; (400a3c <board_init+0x13c>)
  4009e0:	f44f 7280 	mov.w	r2, #256	; 0x100
  4009e4:	611a      	str	r2, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4009e6:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  4009ea:	631a      	str	r2, [r3, #48]	; 0x30
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  4009ec:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
  4009f0:	f44f 6200 	mov.w	r2, #2048	; 0x800
  4009f4:	615a      	str	r2, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4009f6:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_PUER = mask;
  4009fa:	665a      	str	r2, [r3, #100]	; 0x64
		base->PIO_PPDDR = mask;
  4009fc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  400a00:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFER = mask;
  400a02:	621a      	str	r2, [r3, #32]
		base->PIO_IFSCER = mask;
  400a04:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
		base->PIO_ABCDSR[0] &= ~mask;
  400a08:	6f19      	ldr	r1, [r3, #112]	; 0x70
  400a0a:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
  400a0e:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  400a10:	6f59      	ldr	r1, [r3, #116]	; 0x74
  400a12:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
  400a16:	6759      	str	r1, [r3, #116]	; 0x74
	case IOPORT_SENSE_FALLING:
		base->PIO_ESR = mask;
		base->PIO_FELLSR = mask;
		break;
	case IOPORT_SENSE_RISING:
		base->PIO_ESR = mask;
  400a18:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
		base->PIO_REHLSR = mask;
  400a1c:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
		break;
	default:
		base->PIO_AIMDR = mask;
		return;
	}
	base->PIO_AIMER = mask;
  400a20:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  400a24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  400a26:	bf00      	nop
  400a28:	400e1850 	.word	0x400e1850
  400a2c:	e000ed00 	.word	0xe000ed00
  400a30:	400e0c00 	.word	0x400e0c00
  400a34:	5a00080c 	.word	0x5a00080c
  400a38:	00400e4d 	.word	0x00400e4d
  400a3c:	400e1200 	.word	0x400e1200

00400a40 <pio_set>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_set(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_SODR = ul_mask;
  400a40:	6301      	str	r1, [r0, #48]	; 0x30
  400a42:	4770      	bx	lr

00400a44 <pio_clear>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_clear(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_CODR = ul_mask;
  400a44:	6341      	str	r1, [r0, #52]	; 0x34
  400a46:	4770      	bx	lr

00400a48 <pio_set_peripheral>:
		const uint32_t ul_mask)
{
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
  400a48:	6442      	str	r2, [r0, #68]	; 0x44

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	switch (ul_type) {
  400a4a:	f1b1 5fc0 	cmp.w	r1, #402653184	; 0x18000000
  400a4e:	d03a      	beq.n	400ac6 <pio_set_peripheral+0x7e>
  400a50:	d813      	bhi.n	400a7a <pio_set_peripheral+0x32>
  400a52:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
  400a56:	d025      	beq.n	400aa4 <pio_set_peripheral+0x5c>
  400a58:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
  400a5c:	d10a      	bne.n	400a74 <pio_set_peripheral+0x2c>

		ul_sr = p_pio->PIO_ABCDSR[1];
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
		break;
	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABCDSR[0];
  400a5e:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  400a60:	4313      	orrs	r3, r2
  400a62:	6703      	str	r3, [r0, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  400a64:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  400a66:	6f41      	ldr	r1, [r0, #116]	; 0x74
  400a68:	400b      	ands	r3, r1
  400a6a:	ea23 0302 	bic.w	r3, r3, r2
  400a6e:	6743      	str	r3, [r0, #116]	; 0x74
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
  400a70:	6042      	str	r2, [r0, #4]
  400a72:	4770      	bx	lr
	switch (ul_type) {
  400a74:	2900      	cmp	r1, #0
  400a76:	d1fb      	bne.n	400a70 <pio_set_peripheral+0x28>
  400a78:	4770      	bx	lr
  400a7a:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
  400a7e:	d021      	beq.n	400ac4 <pio_set_peripheral+0x7c>
  400a80:	d809      	bhi.n	400a96 <pio_set_peripheral+0x4e>
  400a82:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
  400a86:	d1f3      	bne.n	400a70 <pio_set_peripheral+0x28>
		ul_sr = p_pio->PIO_ABCDSR[0];
  400a88:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  400a8a:	4313      	orrs	r3, r2
  400a8c:	6703      	str	r3, [r0, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  400a8e:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  400a90:	4313      	orrs	r3, r2
  400a92:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  400a94:	e7ec      	b.n	400a70 <pio_set_peripheral+0x28>
	switch (ul_type) {
  400a96:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
  400a9a:	d013      	beq.n	400ac4 <pio_set_peripheral+0x7c>
  400a9c:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
  400aa0:	d010      	beq.n	400ac4 <pio_set_peripheral+0x7c>
  400aa2:	e7e5      	b.n	400a70 <pio_set_peripheral+0x28>
{
  400aa4:	b410      	push	{r4}
		ul_sr = p_pio->PIO_ABCDSR[0];
  400aa6:	6f01      	ldr	r1, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  400aa8:	6f04      	ldr	r4, [r0, #112]	; 0x70
  400aaa:	43d3      	mvns	r3, r2
  400aac:	4021      	ands	r1, r4
  400aae:	461c      	mov	r4, r3
  400ab0:	4019      	ands	r1, r3
  400ab2:	6701      	str	r1, [r0, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  400ab4:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  400ab6:	6f41      	ldr	r1, [r0, #116]	; 0x74
  400ab8:	400b      	ands	r3, r1
  400aba:	4023      	ands	r3, r4
  400abc:	6743      	str	r3, [r0, #116]	; 0x74
	p_pio->PIO_PDR = ul_mask;
  400abe:	6042      	str	r2, [r0, #4]
}
  400ac0:	f85d 4b04 	ldr.w	r4, [sp], #4
  400ac4:	4770      	bx	lr
		ul_sr = p_pio->PIO_ABCDSR[0];
  400ac6:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  400ac8:	6f01      	ldr	r1, [r0, #112]	; 0x70
  400aca:	400b      	ands	r3, r1
  400acc:	ea23 0302 	bic.w	r3, r3, r2
  400ad0:	6703      	str	r3, [r0, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  400ad2:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  400ad4:	4313      	orrs	r3, r2
  400ad6:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  400ad8:	e7ca      	b.n	400a70 <pio_set_peripheral+0x28>

00400ada <pio_set_input>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
  400ada:	6441      	str	r1, [r0, #68]	; 0x44
	if (ul_pull_up_enable) {
  400adc:	f012 0f01 	tst.w	r2, #1
  400ae0:	d10d      	bne.n	400afe <pio_set_input+0x24>
		p_pio->PIO_PUDR = ul_mask;
  400ae2:	6601      	str	r1, [r0, #96]	; 0x60
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
  400ae4:	f012 0f0a 	tst.w	r2, #10
  400ae8:	d00b      	beq.n	400b02 <pio_set_input+0x28>
		p_pio->PIO_IFER = ul_mask;
  400aea:	6201      	str	r1, [r0, #32]
	if (ul_attribute & PIO_DEGLITCH) {
  400aec:	f012 0f02 	tst.w	r2, #2
  400af0:	d109      	bne.n	400b06 <pio_set_input+0x2c>
		if (ul_attribute & PIO_DEBOUNCE) {
  400af2:	f012 0f08 	tst.w	r2, #8
  400af6:	d008      	beq.n	400b0a <pio_set_input+0x30>
			p_pio->PIO_IFSCER = ul_mask;
  400af8:	f8c0 1084 	str.w	r1, [r0, #132]	; 0x84
  400afc:	e005      	b.n	400b0a <pio_set_input+0x30>
		p_pio->PIO_PUER = ul_mask;
  400afe:	6641      	str	r1, [r0, #100]	; 0x64
  400b00:	e7f0      	b.n	400ae4 <pio_set_input+0xa>
		p_pio->PIO_IFDR = ul_mask;
  400b02:	6241      	str	r1, [r0, #36]	; 0x24
  400b04:	e7f2      	b.n	400aec <pio_set_input+0x12>
		p_pio->PIO_IFSCDR = ul_mask;
  400b06:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
	p_pio->PIO_ODR = ul_mask;
  400b0a:	6141      	str	r1, [r0, #20]
	p_pio->PIO_PER = ul_mask;
  400b0c:	6001      	str	r1, [r0, #0]
  400b0e:	4770      	bx	lr

00400b10 <pio_set_output>:
{
  400b10:	b410      	push	{r4}
  400b12:	9c01      	ldr	r4, [sp, #4]
	p_pio->PIO_IDR = ul_mask;
  400b14:	6441      	str	r1, [r0, #68]	; 0x44
	if (ul_pull_up_enable) {
  400b16:	b94c      	cbnz	r4, 400b2c <pio_set_output+0x1c>
		p_pio->PIO_PUDR = ul_mask;
  400b18:	6601      	str	r1, [r0, #96]	; 0x60
	if (ul_multidrive_enable) {
  400b1a:	b14b      	cbz	r3, 400b30 <pio_set_output+0x20>
		p_pio->PIO_MDER = ul_mask;
  400b1c:	6501      	str	r1, [r0, #80]	; 0x50
	if (ul_default_level) {
  400b1e:	b94a      	cbnz	r2, 400b34 <pio_set_output+0x24>
		p_pio->PIO_CODR = ul_mask;
  400b20:	6341      	str	r1, [r0, #52]	; 0x34
	p_pio->PIO_OER = ul_mask;
  400b22:	6101      	str	r1, [r0, #16]
	p_pio->PIO_PER = ul_mask;
  400b24:	6001      	str	r1, [r0, #0]
}
  400b26:	f85d 4b04 	ldr.w	r4, [sp], #4
  400b2a:	4770      	bx	lr
		p_pio->PIO_PUER = ul_mask;
  400b2c:	6641      	str	r1, [r0, #100]	; 0x64
  400b2e:	e7f4      	b.n	400b1a <pio_set_output+0xa>
		p_pio->PIO_MDDR = ul_mask;
  400b30:	6541      	str	r1, [r0, #84]	; 0x54
  400b32:	e7f4      	b.n	400b1e <pio_set_output+0xe>
		p_pio->PIO_SODR = ul_mask;
  400b34:	6301      	str	r1, [r0, #48]	; 0x30
  400b36:	e7f4      	b.n	400b22 <pio_set_output+0x12>

00400b38 <pio_configure>:
{
  400b38:	b570      	push	{r4, r5, r6, lr}
  400b3a:	b082      	sub	sp, #8
  400b3c:	4605      	mov	r5, r0
  400b3e:	4616      	mov	r6, r2
  400b40:	461c      	mov	r4, r3
	switch (ul_type) {
  400b42:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
  400b46:	d014      	beq.n	400b72 <pio_configure+0x3a>
  400b48:	d90a      	bls.n	400b60 <pio_configure+0x28>
  400b4a:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
  400b4e:	d024      	beq.n	400b9a <pio_configure+0x62>
  400b50:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
  400b54:	d021      	beq.n	400b9a <pio_configure+0x62>
  400b56:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
  400b5a:	d017      	beq.n	400b8c <pio_configure+0x54>
		return 0;
  400b5c:	2000      	movs	r0, #0
  400b5e:	e01a      	b.n	400b96 <pio_configure+0x5e>
	switch (ul_type) {
  400b60:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
  400b64:	d005      	beq.n	400b72 <pio_configure+0x3a>
  400b66:	f1b1 5fc0 	cmp.w	r1, #402653184	; 0x18000000
  400b6a:	d002      	beq.n	400b72 <pio_configure+0x3a>
  400b6c:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
  400b70:	d1f4      	bne.n	400b5c <pio_configure+0x24>
		pio_set_peripheral(p_pio, ul_type, ul_mask);
  400b72:	4632      	mov	r2, r6
  400b74:	4628      	mov	r0, r5
  400b76:	4b11      	ldr	r3, [pc, #68]	; (400bbc <pio_configure+0x84>)
  400b78:	4798      	blx	r3
	if (ul_pull_up_enable) {
  400b7a:	f014 0f01 	tst.w	r4, #1
  400b7e:	d102      	bne.n	400b86 <pio_configure+0x4e>
		p_pio->PIO_PUDR = ul_mask;
  400b80:	662e      	str	r6, [r5, #96]	; 0x60
	return 1;
  400b82:	2001      	movs	r0, #1
  400b84:	e007      	b.n	400b96 <pio_configure+0x5e>
		p_pio->PIO_PUER = ul_mask;
  400b86:	666e      	str	r6, [r5, #100]	; 0x64
	return 1;
  400b88:	2001      	movs	r0, #1
  400b8a:	e004      	b.n	400b96 <pio_configure+0x5e>
		pio_set_input(p_pio, ul_mask, ul_attribute);
  400b8c:	461a      	mov	r2, r3
  400b8e:	4631      	mov	r1, r6
  400b90:	4b0b      	ldr	r3, [pc, #44]	; (400bc0 <pio_configure+0x88>)
  400b92:	4798      	blx	r3
	return 1;
  400b94:	2001      	movs	r0, #1
}
  400b96:	b002      	add	sp, #8
  400b98:	bd70      	pop	{r4, r5, r6, pc}
		pio_set_output(p_pio, ul_mask, (ul_type == PIO_OUTPUT_1),
  400b9a:	f004 0301 	and.w	r3, r4, #1
  400b9e:	9300      	str	r3, [sp, #0]
  400ba0:	f3c4 0380 	ubfx	r3, r4, #2, #1
  400ba4:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
  400ba8:	bf14      	ite	ne
  400baa:	2200      	movne	r2, #0
  400bac:	2201      	moveq	r2, #1
  400bae:	4631      	mov	r1, r6
  400bb0:	4628      	mov	r0, r5
  400bb2:	4c04      	ldr	r4, [pc, #16]	; (400bc4 <pio_configure+0x8c>)
  400bb4:	47a0      	blx	r4
	return 1;
  400bb6:	2001      	movs	r0, #1
		break;
  400bb8:	e7ed      	b.n	400b96 <pio_configure+0x5e>
  400bba:	bf00      	nop
  400bbc:	00400a49 	.word	0x00400a49
  400bc0:	00400adb 	.word	0x00400adb
  400bc4:	00400b11 	.word	0x00400b11

00400bc8 <pio_configure_interrupt>:
	if (ul_attr & PIO_IT_AIME) {
  400bc8:	f012 0f10 	tst.w	r2, #16
  400bcc:	d012      	beq.n	400bf4 <pio_configure_interrupt+0x2c>
		p_pio->PIO_AIMER = ul_mask;
  400bce:	f8c0 10b0 	str.w	r1, [r0, #176]	; 0xb0
		if (ul_attr & PIO_IT_RE_OR_HL) {
  400bd2:	f012 0f20 	tst.w	r2, #32
  400bd6:	d007      	beq.n	400be8 <pio_configure_interrupt+0x20>
			p_pio->PIO_REHLSR = ul_mask;
  400bd8:	f8c0 10d4 	str.w	r1, [r0, #212]	; 0xd4
		if (ul_attr & PIO_IT_EDGE) {
  400bdc:	f012 0f40 	tst.w	r2, #64	; 0x40
  400be0:	d005      	beq.n	400bee <pio_configure_interrupt+0x26>
			p_pio->PIO_ESR = ul_mask;
  400be2:	f8c0 10c0 	str.w	r1, [r0, #192]	; 0xc0
  400be6:	4770      	bx	lr
			p_pio->PIO_FELLSR = ul_mask;
  400be8:	f8c0 10d0 	str.w	r1, [r0, #208]	; 0xd0
  400bec:	e7f6      	b.n	400bdc <pio_configure_interrupt+0x14>
			p_pio->PIO_LSR = ul_mask;
  400bee:	f8c0 10c4 	str.w	r1, [r0, #196]	; 0xc4
  400bf2:	4770      	bx	lr
		p_pio->PIO_AIMDR = ul_mask;
  400bf4:	f8c0 10b4 	str.w	r1, [r0, #180]	; 0xb4
  400bf8:	4770      	bx	lr

00400bfa <pio_enable_interrupt>:
	p_pio->PIO_IER = ul_mask;
  400bfa:	6401      	str	r1, [r0, #64]	; 0x40
  400bfc:	4770      	bx	lr

00400bfe <pio_get_interrupt_status>:
 *
 * \return The interrupt status value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
  400bfe:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
  400c00:	4770      	bx	lr

00400c02 <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
  400c02:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
  400c04:	4770      	bx	lr
	...

00400c08 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
  400c08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  400c0c:	4604      	mov	r4, r0
  400c0e:	4688      	mov	r8, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
  400c10:	4b0e      	ldr	r3, [pc, #56]	; (400c4c <pio_handler_process+0x44>)
  400c12:	4798      	blx	r3
  400c14:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
  400c16:	4620      	mov	r0, r4
  400c18:	4b0d      	ldr	r3, [pc, #52]	; (400c50 <pio_handler_process+0x48>)
  400c1a:	4798      	blx	r3

	/* Check pending events */
	if (status != 0) {
  400c1c:	4005      	ands	r5, r0
  400c1e:	d013      	beq.n	400c48 <pio_handler_process+0x40>
  400c20:	4c0c      	ldr	r4, [pc, #48]	; (400c54 <pio_handler_process+0x4c>)
  400c22:	f104 0660 	add.w	r6, r4, #96	; 0x60
  400c26:	e003      	b.n	400c30 <pio_handler_process+0x28>
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
  400c28:	42b4      	cmp	r4, r6
  400c2a:	d00d      	beq.n	400c48 <pio_handler_process+0x40>
  400c2c:	3410      	adds	r4, #16
		while (status != 0) {
  400c2e:	b15d      	cbz	r5, 400c48 <pio_handler_process+0x40>
			if (gs_interrupt_sources[i].id == ul_id) {
  400c30:	6820      	ldr	r0, [r4, #0]
  400c32:	4540      	cmp	r0, r8
  400c34:	d1f8      	bne.n	400c28 <pio_handler_process+0x20>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  400c36:	6861      	ldr	r1, [r4, #4]
  400c38:	4229      	tst	r1, r5
  400c3a:	d0f5      	beq.n	400c28 <pio_handler_process+0x20>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  400c3c:	68e3      	ldr	r3, [r4, #12]
  400c3e:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
  400c40:	6863      	ldr	r3, [r4, #4]
  400c42:	ea25 0503 	bic.w	r5, r5, r3
  400c46:	e7ef      	b.n	400c28 <pio_handler_process+0x20>
  400c48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  400c4c:	00400bff 	.word	0x00400bff
  400c50:	00400c03 	.word	0x00400c03
  400c54:	2040066c 	.word	0x2040066c

00400c58 <pio_handler_set>:
 *
 * \return 0 if successful, 1 if the maximum number of sources has been defined.
 */
uint32_t pio_handler_set(Pio *p_pio, uint32_t ul_id, uint32_t ul_mask,
		uint32_t ul_attr, void (*p_handler) (uint32_t, uint32_t))
{
  400c58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    uint8_t i;
	struct s_interrupt_source *pSource;

	if (gs_ul_nb_sources >= MAX_INTERRUPT_SOURCES)
  400c5a:	4c18      	ldr	r4, [pc, #96]	; (400cbc <pio_handler_set+0x64>)
  400c5c:	6826      	ldr	r6, [r4, #0]
  400c5e:	2e06      	cmp	r6, #6
  400c60:	d82a      	bhi.n	400cb8 <pio_handler_set+0x60>
  400c62:	f04f 0c00 	mov.w	ip, #0
  400c66:	4664      	mov	r4, ip
		return 1;

    /* Check interrupt for this pin, if already defined, redefine it. */
	for (i = 0; i <= gs_ul_nb_sources; i++) {
		pSource = &(gs_interrupt_sources[i]);
		if (pSource->id == ul_id && pSource->mask == ul_mask) {
  400c68:	4f15      	ldr	r7, [pc, #84]	; (400cc0 <pio_handler_set+0x68>)
  400c6a:	e004      	b.n	400c76 <pio_handler_set+0x1e>
	for (i = 0; i <= gs_ul_nb_sources; i++) {
  400c6c:	3401      	adds	r4, #1
  400c6e:	b2e4      	uxtb	r4, r4
  400c70:	46a4      	mov	ip, r4
  400c72:	42a6      	cmp	r6, r4
  400c74:	d309      	bcc.n	400c8a <pio_handler_set+0x32>
		pSource = &(gs_interrupt_sources[i]);
  400c76:	46a6      	mov	lr, r4
		if (pSource->id == ul_id && pSource->mask == ul_mask) {
  400c78:	0125      	lsls	r5, r4, #4
  400c7a:	597d      	ldr	r5, [r7, r5]
  400c7c:	428d      	cmp	r5, r1
  400c7e:	d1f5      	bne.n	400c6c <pio_handler_set+0x14>
  400c80:	eb07 1504 	add.w	r5, r7, r4, lsl #4
  400c84:	686d      	ldr	r5, [r5, #4]
  400c86:	4295      	cmp	r5, r2
  400c88:	d1f0      	bne.n	400c6c <pio_handler_set+0x14>
			break;
		}
	}

	/* Define new source */
	pSource->id = ul_id;
  400c8a:	4d0d      	ldr	r5, [pc, #52]	; (400cc0 <pio_handler_set+0x68>)
  400c8c:	ea4f 1e0e 	mov.w	lr, lr, lsl #4
  400c90:	eb05 040e 	add.w	r4, r5, lr
  400c94:	f845 100e 	str.w	r1, [r5, lr]
	pSource->mask = ul_mask;
  400c98:	6062      	str	r2, [r4, #4]
	pSource->attr = ul_attr;
  400c9a:	60a3      	str	r3, [r4, #8]
	pSource->handler = p_handler;
  400c9c:	9906      	ldr	r1, [sp, #24]
  400c9e:	60e1      	str	r1, [r4, #12]
	if (i == gs_ul_nb_sources + 1) {
  400ca0:	3601      	adds	r6, #1
  400ca2:	4566      	cmp	r6, ip
  400ca4:	d005      	beq.n	400cb2 <pio_handler_set+0x5a>
  400ca6:	4611      	mov	r1, r2
		gs_ul_nb_sources++;
	}

	/* Configure interrupt mode */
	pio_configure_interrupt(p_pio, ul_mask, ul_attr);
  400ca8:	461a      	mov	r2, r3
  400caa:	4b06      	ldr	r3, [pc, #24]	; (400cc4 <pio_handler_set+0x6c>)
  400cac:	4798      	blx	r3

	return 0;
  400cae:	2000      	movs	r0, #0
  400cb0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		gs_ul_nb_sources++;
  400cb2:	4902      	ldr	r1, [pc, #8]	; (400cbc <pio_handler_set+0x64>)
  400cb4:	600e      	str	r6, [r1, #0]
  400cb6:	e7f6      	b.n	400ca6 <pio_handler_set+0x4e>
		return 1;
  400cb8:	2001      	movs	r0, #1
}
  400cba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  400cbc:	204006dc 	.word	0x204006dc
  400cc0:	2040066c 	.word	0x2040066c
  400cc4:	00400bc9 	.word	0x00400bc9

00400cc8 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
  400cc8:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
  400cca:	210a      	movs	r1, #10
  400ccc:	4801      	ldr	r0, [pc, #4]	; (400cd4 <PIOA_Handler+0xc>)
  400cce:	4b02      	ldr	r3, [pc, #8]	; (400cd8 <PIOA_Handler+0x10>)
  400cd0:	4798      	blx	r3
  400cd2:	bd08      	pop	{r3, pc}
  400cd4:	400e0e00 	.word	0x400e0e00
  400cd8:	00400c09 	.word	0x00400c09

00400cdc <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
  400cdc:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
  400cde:	210b      	movs	r1, #11
  400ce0:	4801      	ldr	r0, [pc, #4]	; (400ce8 <PIOB_Handler+0xc>)
  400ce2:	4b02      	ldr	r3, [pc, #8]	; (400cec <PIOB_Handler+0x10>)
  400ce4:	4798      	blx	r3
  400ce6:	bd08      	pop	{r3, pc}
  400ce8:	400e1000 	.word	0x400e1000
  400cec:	00400c09 	.word	0x00400c09

00400cf0 <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
  400cf0:	b508      	push	{r3, lr}
	pio_handler_process(PIOC, ID_PIOC);
  400cf2:	210c      	movs	r1, #12
  400cf4:	4801      	ldr	r0, [pc, #4]	; (400cfc <PIOC_Handler+0xc>)
  400cf6:	4b02      	ldr	r3, [pc, #8]	; (400d00 <PIOC_Handler+0x10>)
  400cf8:	4798      	blx	r3
  400cfa:	bd08      	pop	{r3, pc}
  400cfc:	400e1200 	.word	0x400e1200
  400d00:	00400c09 	.word	0x00400c09

00400d04 <PIOD_Handler>:
/**
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
  400d04:	b508      	push	{r3, lr}
	pio_handler_process(PIOD, ID_PIOD);
  400d06:	2110      	movs	r1, #16
  400d08:	4801      	ldr	r0, [pc, #4]	; (400d10 <PIOD_Handler+0xc>)
  400d0a:	4b02      	ldr	r3, [pc, #8]	; (400d14 <PIOD_Handler+0x10>)
  400d0c:	4798      	blx	r3
  400d0e:	bd08      	pop	{r3, pc}
  400d10:	400e1400 	.word	0x400e1400
  400d14:	00400c09 	.word	0x00400c09

00400d18 <PIOE_Handler>:
/**
 * \brief Parallel IO Controller E interrupt handler.
 * Redefined PIOE interrupt handler for NVIC interrupt table.
 */
void PIOE_Handler(void)
{
  400d18:	b508      	push	{r3, lr}
	pio_handler_process(PIOE, ID_PIOE);
  400d1a:	2111      	movs	r1, #17
  400d1c:	4801      	ldr	r0, [pc, #4]	; (400d24 <PIOE_Handler+0xc>)
  400d1e:	4b02      	ldr	r3, [pc, #8]	; (400d28 <PIOE_Handler+0x10>)
  400d20:	4798      	blx	r3
  400d22:	bd08      	pop	{r3, pc}
  400d24:	400e1600 	.word	0x400e1600
  400d28:	00400c09 	.word	0x00400c09

00400d2c <pmc_mck_set_division>:
 *
 * \param ul_div Division value.
 */
void pmc_mck_set_division(uint32_t ul_div)
{
	switch (ul_div) {
  400d2c:	2803      	cmp	r0, #3
  400d2e:	d011      	beq.n	400d54 <pmc_mck_set_division+0x28>
  400d30:	2804      	cmp	r0, #4
  400d32:	d012      	beq.n	400d5a <pmc_mck_set_division+0x2e>
		case 1:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
  400d34:	2802      	cmp	r0, #2
  400d36:	bf0c      	ite	eq
  400d38:	f44f 7180 	moveq.w	r1, #256	; 0x100
  400d3c:	2100      	movne	r1, #0
		default:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
			break;
	}
	PMC->PMC_MCKR =
			(PMC->PMC_MCKR & (~PMC_MCKR_MDIV_Msk)) | ul_div;
  400d3e:	4a08      	ldr	r2, [pc, #32]	; (400d60 <pmc_mck_set_division+0x34>)
  400d40:	6b13      	ldr	r3, [r2, #48]	; 0x30
  400d42:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  400d46:	430b      	orrs	r3, r1
	PMC->PMC_MCKR =
  400d48:	6313      	str	r3, [r2, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY));
  400d4a:	6e93      	ldr	r3, [r2, #104]	; 0x68
  400d4c:	f013 0f08 	tst.w	r3, #8
  400d50:	d0fb      	beq.n	400d4a <pmc_mck_set_division+0x1e>
}
  400d52:	4770      	bx	lr
			ul_div = PMC_MCKR_MDIV_PCK_DIV3;
  400d54:	f44f 7140 	mov.w	r1, #768	; 0x300
			break;
  400d58:	e7f1      	b.n	400d3e <pmc_mck_set_division+0x12>
			ul_div = PMC_MCKR_MDIV_PCK_DIV4;
  400d5a:	f44f 7100 	mov.w	r1, #512	; 0x200
			break;
  400d5e:	e7ee      	b.n	400d3e <pmc_mck_set_division+0x12>
  400d60:	400e0600 	.word	0x400e0600

00400d64 <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
  400d64:	4a17      	ldr	r2, [pc, #92]	; (400dc4 <pmc_switch_mck_to_pllack+0x60>)
  400d66:	6b13      	ldr	r3, [r2, #48]	; 0x30
  400d68:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  400d6c:	4318      	orrs	r0, r3
  400d6e:	6310      	str	r0, [r2, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  400d70:	6e93      	ldr	r3, [r2, #104]	; 0x68
  400d72:	f013 0f08 	tst.w	r3, #8
  400d76:	d10a      	bne.n	400d8e <pmc_switch_mck_to_pllack+0x2a>
  400d78:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  400d7c:	4911      	ldr	r1, [pc, #68]	; (400dc4 <pmc_switch_mck_to_pllack+0x60>)
  400d7e:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  400d80:	f012 0f08 	tst.w	r2, #8
  400d84:	d103      	bne.n	400d8e <pmc_switch_mck_to_pllack+0x2a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  400d86:	3b01      	subs	r3, #1
  400d88:	d1f9      	bne.n	400d7e <pmc_switch_mck_to_pllack+0x1a>
			return 1;
  400d8a:	2001      	movs	r0, #1
  400d8c:	4770      	bx	lr
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
  400d8e:	4a0d      	ldr	r2, [pc, #52]	; (400dc4 <pmc_switch_mck_to_pllack+0x60>)
  400d90:	6b13      	ldr	r3, [r2, #48]	; 0x30
  400d92:	f023 0303 	bic.w	r3, r3, #3
  400d96:	f043 0302 	orr.w	r3, r3, #2
  400d9a:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  400d9c:	6e93      	ldr	r3, [r2, #104]	; 0x68
  400d9e:	f013 0f08 	tst.w	r3, #8
  400da2:	d10a      	bne.n	400dba <pmc_switch_mck_to_pllack+0x56>
  400da4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  400da8:	4906      	ldr	r1, [pc, #24]	; (400dc4 <pmc_switch_mck_to_pllack+0x60>)
  400daa:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  400dac:	f012 0f08 	tst.w	r2, #8
  400db0:	d105      	bne.n	400dbe <pmc_switch_mck_to_pllack+0x5a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  400db2:	3b01      	subs	r3, #1
  400db4:	d1f9      	bne.n	400daa <pmc_switch_mck_to_pllack+0x46>
			return 1;
  400db6:	2001      	movs	r0, #1
		}
	}

	return 0;
}
  400db8:	4770      	bx	lr
	return 0;
  400dba:	2000      	movs	r0, #0
  400dbc:	4770      	bx	lr
  400dbe:	2000      	movs	r0, #0
  400dc0:	4770      	bx	lr
  400dc2:	bf00      	nop
  400dc4:	400e0600 	.word	0x400e0600

00400dc8 <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
  400dc8:	b9a0      	cbnz	r0, 400df4 <pmc_switch_mainck_to_xtal+0x2c>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  400dca:	480e      	ldr	r0, [pc, #56]	; (400e04 <pmc_switch_mainck_to_xtal+0x3c>)
  400dcc:	6a03      	ldr	r3, [r0, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
  400dce:	0209      	lsls	r1, r1, #8
  400dd0:	b289      	uxth	r1, r1
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  400dd2:	4a0d      	ldr	r2, [pc, #52]	; (400e08 <pmc_switch_mainck_to_xtal+0x40>)
  400dd4:	401a      	ands	r2, r3
  400dd6:	4b0d      	ldr	r3, [pc, #52]	; (400e0c <pmc_switch_mainck_to_xtal+0x44>)
  400dd8:	4313      	orrs	r3, r2
  400dda:	4319      	orrs	r1, r3
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  400ddc:	6201      	str	r1, [r0, #32]
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  400dde:	4602      	mov	r2, r0
  400de0:	6e93      	ldr	r3, [r2, #104]	; 0x68
  400de2:	f013 0f01 	tst.w	r3, #1
  400de6:	d0fb      	beq.n	400de0 <pmc_switch_mainck_to_xtal+0x18>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
  400de8:	4a06      	ldr	r2, [pc, #24]	; (400e04 <pmc_switch_mainck_to_xtal+0x3c>)
  400dea:	6a11      	ldr	r1, [r2, #32]
  400dec:	4b08      	ldr	r3, [pc, #32]	; (400e10 <pmc_switch_mainck_to_xtal+0x48>)
  400dee:	430b      	orrs	r3, r1
  400df0:	6213      	str	r3, [r2, #32]
  400df2:	4770      	bx	lr
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  400df4:	4903      	ldr	r1, [pc, #12]	; (400e04 <pmc_switch_mainck_to_xtal+0x3c>)
  400df6:	6a0b      	ldr	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
  400df8:	4a06      	ldr	r2, [pc, #24]	; (400e14 <pmc_switch_mainck_to_xtal+0x4c>)
  400dfa:	401a      	ands	r2, r3
  400dfc:	4b06      	ldr	r3, [pc, #24]	; (400e18 <pmc_switch_mainck_to_xtal+0x50>)
  400dfe:	4313      	orrs	r3, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  400e00:	620b      	str	r3, [r1, #32]
  400e02:	4770      	bx	lr
  400e04:	400e0600 	.word	0x400e0600
  400e08:	ffc8fffc 	.word	0xffc8fffc
  400e0c:	00370001 	.word	0x00370001
  400e10:	01370000 	.word	0x01370000
  400e14:	fec8fffc 	.word	0xfec8fffc
  400e18:	01370002 	.word	0x01370002

00400e1c <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
  400e1c:	4b02      	ldr	r3, [pc, #8]	; (400e28 <pmc_osc_is_ready_mainck+0xc>)
  400e1e:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  400e20:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
  400e24:	4770      	bx	lr
  400e26:	bf00      	nop
  400e28:	400e0600 	.word	0x400e0600

00400e2c <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
  400e2c:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  400e30:	4b01      	ldr	r3, [pc, #4]	; (400e38 <pmc_disable_pllack+0xc>)
  400e32:	629a      	str	r2, [r3, #40]	; 0x28
  400e34:	4770      	bx	lr
  400e36:	bf00      	nop
  400e38:	400e0600 	.word	0x400e0600

00400e3c <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
  400e3c:	4b02      	ldr	r3, [pc, #8]	; (400e48 <pmc_is_locked_pllack+0xc>)
  400e3e:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  400e40:	f000 0002 	and.w	r0, r0, #2
  400e44:	4770      	bx	lr
  400e46:	bf00      	nop
  400e48:	400e0600 	.word	0x400e0600

00400e4c <pmc_enable_periph_clk>:
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
  400e4c:	283f      	cmp	r0, #63	; 0x3f
  400e4e:	d81e      	bhi.n	400e8e <pmc_enable_periph_clk+0x42>
		return 1;
	}

	if (ul_id < 32) {
  400e50:	281f      	cmp	r0, #31
  400e52:	d80c      	bhi.n	400e6e <pmc_enable_periph_clk+0x22>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
  400e54:	4b11      	ldr	r3, [pc, #68]	; (400e9c <pmc_enable_periph_clk+0x50>)
  400e56:	699a      	ldr	r2, [r3, #24]
  400e58:	2301      	movs	r3, #1
  400e5a:	4083      	lsls	r3, r0
  400e5c:	4393      	bics	r3, r2
  400e5e:	d018      	beq.n	400e92 <pmc_enable_periph_clk+0x46>
			PMC->PMC_PCER0 = 1 << ul_id;
  400e60:	2301      	movs	r3, #1
  400e62:	fa03 f000 	lsl.w	r0, r3, r0
  400e66:	4b0d      	ldr	r3, [pc, #52]	; (400e9c <pmc_enable_periph_clk+0x50>)
  400e68:	6118      	str	r0, [r3, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
  400e6a:	2000      	movs	r0, #0
  400e6c:	4770      	bx	lr
		ul_id -= 32;
  400e6e:	3820      	subs	r0, #32
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
  400e70:	4b0a      	ldr	r3, [pc, #40]	; (400e9c <pmc_enable_periph_clk+0x50>)
  400e72:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
  400e76:	2301      	movs	r3, #1
  400e78:	4083      	lsls	r3, r0
  400e7a:	4393      	bics	r3, r2
  400e7c:	d00b      	beq.n	400e96 <pmc_enable_periph_clk+0x4a>
			PMC->PMC_PCER1 = 1 << ul_id;
  400e7e:	2301      	movs	r3, #1
  400e80:	fa03 f000 	lsl.w	r0, r3, r0
  400e84:	4b05      	ldr	r3, [pc, #20]	; (400e9c <pmc_enable_periph_clk+0x50>)
  400e86:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
	return 0;
  400e8a:	2000      	movs	r0, #0
  400e8c:	4770      	bx	lr
		return 1;
  400e8e:	2001      	movs	r0, #1
  400e90:	4770      	bx	lr
	return 0;
  400e92:	2000      	movs	r0, #0
  400e94:	4770      	bx	lr
  400e96:	2000      	movs	r0, #0
}
  400e98:	4770      	bx	lr
  400e9a:	bf00      	nop
  400e9c:	400e0600 	.word	0x400e0600

00400ea0 <pmc_set_flash_in_wait_mode>:
 *
 * \param ul_flash_state PMC_WAIT_MODE_FLASH_STANDBY flash in standby mode,
 * PMC_WAIT_MODE_FLASH_DEEP_POWERDOWN flash in deep power down mode.
 */
void pmc_set_flash_in_wait_mode(uint32_t ul_flash_state)
{
  400ea0:	4770      	bx	lr
	...

00400ea4 <pmc_enable_waitmode>:
void pmc_enable_waitmode(void)
{
	uint32_t i;

	/* Flash in wait mode */
	i = PMC->PMC_FSMR;
  400ea4:	4a10      	ldr	r2, [pc, #64]	; (400ee8 <pmc_enable_waitmode+0x44>)
  400ea6:	6f13      	ldr	r3, [r2, #112]	; 0x70
	i &= ~PMC_FSMR_FLPM_Msk;
  400ea8:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
#if !(SAMV71 || SAMV70 || SAME70 || SAMS70)
	i |= ul_flash_in_wait_mode;
#else
	i |= PMC_WAIT_MODE_FLASH_IDLE;
  400eac:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
#endif
	PMC->PMC_FSMR = i;
  400eb0:	6713      	str	r3, [r2, #112]	; 0x70

	/* Set the WAITMODE bit = 1 */
	PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_WAITMODE;
  400eb2:	6a11      	ldr	r1, [r2, #32]
  400eb4:	4b0d      	ldr	r3, [pc, #52]	; (400eec <pmc_enable_waitmode+0x48>)
  400eb6:	430b      	orrs	r3, r1
  400eb8:	6213      	str	r3, [r2, #32]

	/* Waiting for Master Clock Ready MCKRDY = 1 */
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY));
  400eba:	6e93      	ldr	r3, [r2, #104]	; 0x68
  400ebc:	f013 0f08 	tst.w	r3, #8
  400ec0:	d0fb      	beq.n	400eba <pmc_enable_waitmode+0x16>
  400ec2:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
  __ASM volatile ("nop");
  400ec6:	bf00      	nop

	/* Waiting for MOSCRCEN bit cleared is strongly recommended
	 * to ensure that the core will not execute undesired instructions
	 */
	for (i = 0; i < 500; i++) {
  400ec8:	3b01      	subs	r3, #1
  400eca:	d1fc      	bne.n	400ec6 <pmc_enable_waitmode+0x22>
		__NOP();
	}
	while (!(PMC->CKGR_MOR & CKGR_MOR_MOSCRCEN));
  400ecc:	4a06      	ldr	r2, [pc, #24]	; (400ee8 <pmc_enable_waitmode+0x44>)
  400ece:	6a13      	ldr	r3, [r2, #32]
  400ed0:	f013 0f08 	tst.w	r3, #8
  400ed4:	d0fb      	beq.n	400ece <pmc_enable_waitmode+0x2a>

#if (!SAMG)
	/* Restore Flash in idle mode */
	i = PMC->PMC_FSMR;
  400ed6:	4a04      	ldr	r2, [pc, #16]	; (400ee8 <pmc_enable_waitmode+0x44>)
  400ed8:	6f13      	ldr	r3, [r2, #112]	; 0x70
	i &= ~PMC_FSMR_FLPM_Msk;
  400eda:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
	i |= PMC_WAIT_MODE_FLASH_IDLE;
  400ede:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
	PMC->PMC_FSMR = i;
  400ee2:	6713      	str	r3, [r2, #112]	; 0x70
  400ee4:	4770      	bx	lr
  400ee6:	bf00      	nop
  400ee8:	400e0600 	.word	0x400e0600
  400eec:	00370004 	.word	0x00370004

00400ef0 <pmc_sleep>:
static volatile bool b_is_sleep_clock_used = false;
/** Callback invoked once when clocks are restored */
static pmc_callback_wakeup_clocks_restored_t callback_clocks_restored = NULL;

void pmc_sleep(int sleep_mode)
{
  400ef0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	switch (sleep_mode) {
  400ef4:	1e43      	subs	r3, r0, #1
  400ef6:	2b04      	cmp	r3, #4
  400ef8:	f200 8107 	bhi.w	40110a <pmc_sleep+0x21a>
  400efc:	e8df f013 	tbh	[pc, r3, lsl #1]
  400f00:	00050005 	.word	0x00050005
  400f04:	00150015 	.word	0x00150015
  400f08:	00f6      	.short	0x00f6
	case SAM_PM_SMODE_SLEEP_WFI:
	case SAM_PM_SMODE_SLEEP_WFE:
#if (SAM4S || SAM4E || SAM4N || SAM4C || SAM4CM || SAM4CP || SAMG || SAMV71 || SAMV70 || SAMS70 || SAME70)
		SCB->SCR &= (uint32_t)~SCR_SLEEPDEEP;
  400f0a:	4a81      	ldr	r2, [pc, #516]	; (401110 <pmc_sleep+0x220>)
  400f0c:	6913      	ldr	r3, [r2, #16]
  400f0e:	f023 0304 	bic.w	r3, r3, #4
  400f12:	6113      	str	r3, [r2, #16]
		cpu_irq_enable();
  400f14:	2201      	movs	r2, #1
  400f16:	4b7f      	ldr	r3, [pc, #508]	; (401114 <pmc_sleep+0x224>)
  400f18:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dmb");
  400f1a:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
  400f1e:	b662      	cpsie	i
  __ASM volatile ("dsb");
  400f20:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("wfi");
  400f24:	bf30      	wfi
  400f26:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  400f2a:	4604      	mov	r4, r0
#if defined(EFC1)
		uint32_t fmr1;
#endif
#if (SAM4S || SAM4E || SAM4N || SAM4C || SAM4CM || SAM4CP || SAMG || SAMV71 || SAMV70 || SAMS70 || SAME70)
		(sleep_mode == SAM_PM_SMODE_WAIT_FAST) ?
				pmc_set_flash_in_wait_mode(PMC_FSMR_FLPM_FLASH_STANDBY) :
  400f2c:	2803      	cmp	r0, #3
  400f2e:	bf0c      	ite	eq
  400f30:	2000      	moveq	r0, #0
				pmc_set_flash_in_wait_mode(PMC_FSMR_FLPM_FLASH_DEEP_POWERDOWN);
  400f32:	f44f 1000 	movne.w	r0, #2097152	; 0x200000
  400f36:	4b78      	ldr	r3, [pc, #480]	; (401118 <pmc_sleep+0x228>)
  400f38:	4798      	blx	r3
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
  400f3a:	b672      	cpsid	i
  __ASM volatile ("dmb");
  400f3c:	f3bf 8f5f 	dmb	sy
#endif
		cpu_irq_disable();
  400f40:	2200      	movs	r2, #0
  400f42:	4b74      	ldr	r3, [pc, #464]	; (401114 <pmc_sleep+0x224>)
  400f44:	701a      	strb	r2, [r3, #0]
		b_is_sleep_clock_used = true;
  400f46:	2201      	movs	r2, #1
  400f48:	4b74      	ldr	r3, [pc, #464]	; (40111c <pmc_sleep+0x22c>)
  400f4a:	701a      	strb	r2, [r3, #0]
	uint32_t mor  = PMC->CKGR_MOR;
  400f4c:	4b74      	ldr	r3, [pc, #464]	; (401120 <pmc_sleep+0x230>)
  400f4e:	6a1f      	ldr	r7, [r3, #32]
	uint32_t mckr = PMC->PMC_MCKR;
  400f50:	6b1d      	ldr	r5, [r3, #48]	; 0x30
	uint32_t fmr  = EFC0->EEFC_FMR;
  400f52:	4a74      	ldr	r2, [pc, #464]	; (401124 <pmc_sleep+0x234>)
  400f54:	f8d2 8000 	ldr.w	r8, [r2]
		*p_pll0_setting = PMC->CKGR_PLLAR;
  400f58:	6a9e      	ldr	r6, [r3, #40]	; 0x28
	PMC->CKGR_MOR = CKGR_MOR_KEY_PASSWD | mor | CKGR_MOR_MOSCRCEN;
  400f5a:	4a73      	ldr	r2, [pc, #460]	; (401128 <pmc_sleep+0x238>)
  400f5c:	433a      	orrs	r2, r7
  400f5e:	621a      	str	r2, [r3, #32]
	if ((mckr & PMC_MCKR_CSS_Msk) > PMC_MCKR_CSS_MAIN_CLK) {
  400f60:	f005 0903 	and.w	r9, r5, #3
  400f64:	f1b9 0f01 	cmp.w	r9, #1
  400f68:	f240 8089 	bls.w	40107e <pmc_sleep+0x18e>
		mckr = (mckr & (~PMC_MCKR_CSS_Msk)) | PMC_MCKR_CSS_MAIN_CLK;
  400f6c:	f025 0103 	bic.w	r1, r5, #3
  400f70:	f041 0101 	orr.w	r1, r1, #1
		PMC->PMC_MCKR = mckr;
  400f74:	6319      	str	r1, [r3, #48]	; 0x30
		while(!(PMC->PMC_SR & PMC_SR_MCKRDY));
  400f76:	461a      	mov	r2, r3
  400f78:	6e93      	ldr	r3, [r2, #104]	; 0x68
  400f7a:	f013 0f08 	tst.w	r3, #8
  400f7e:	d0fb      	beq.n	400f78 <pmc_sleep+0x88>
	if (mckr & PMC_MCKR_PRES_Msk) {
  400f80:	f011 0f70 	tst.w	r1, #112	; 0x70
  400f84:	d008      	beq.n	400f98 <pmc_sleep+0xa8>
		mckr = (mckr & (~PMC_MCKR_PRES_Msk));
  400f86:	f021 0170 	bic.w	r1, r1, #112	; 0x70
		PMC->PMC_MCKR = mckr;
  400f8a:	4b65      	ldr	r3, [pc, #404]	; (401120 <pmc_sleep+0x230>)
  400f8c:	6319      	str	r1, [r3, #48]	; 0x30
		while(!(PMC->PMC_SR & PMC_SR_MCKRDY));
  400f8e:	461a      	mov	r2, r3
  400f90:	6e93      	ldr	r3, [r2, #104]	; 0x68
  400f92:	f013 0f08 	tst.w	r3, #8
  400f96:	d0fb      	beq.n	400f90 <pmc_sleep+0xa0>
	pmc_disable_pllack();
  400f98:	4b64      	ldr	r3, [pc, #400]	; (40112c <pmc_sleep+0x23c>)
  400f9a:	4798      	blx	r3
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));
  400f9c:	4a60      	ldr	r2, [pc, #384]	; (401120 <pmc_sleep+0x230>)
  400f9e:	6e93      	ldr	r3, [r2, #104]	; 0x68
  400fa0:	f413 3f00 	tst.w	r3, #131072	; 0x20000
  400fa4:	d0fb      	beq.n	400f9e <pmc_sleep+0xae>
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCSEL) |
  400fa6:	4a5e      	ldr	r2, [pc, #376]	; (401120 <pmc_sleep+0x230>)
  400fa8:	6a11      	ldr	r1, [r2, #32]
  400faa:	4b61      	ldr	r3, [pc, #388]	; (401130 <pmc_sleep+0x240>)
  400fac:	400b      	ands	r3, r1
  400fae:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  400fb2:	6213      	str	r3, [r2, #32]
	while (!(PMC->PMC_SR & PMC_SR_MOSCSELS));
  400fb4:	6e93      	ldr	r3, [r2, #104]	; 0x68
  400fb6:	f413 3f80 	tst.w	r3, #65536	; 0x10000
  400fba:	d0fb      	beq.n	400fb4 <pmc_sleep+0xc4>
	EFC0->EEFC_FMR = fmr & (~EEFC_FMR_FWS_Msk);
  400fbc:	f428 6370 	bic.w	r3, r8, #3840	; 0xf00
  400fc0:	4a58      	ldr	r2, [pc, #352]	; (401124 <pmc_sleep+0x234>)
  400fc2:	6013      	str	r3, [r2, #0]
	if (disable_xtal) {
  400fc4:	2c04      	cmp	r4, #4
  400fc6:	d05c      	beq.n	401082 <pmc_sleep+0x192>
				&fmr1,
#endif
				(sleep_mode == SAM_PM_SMODE_WAIT));

		/* Enter wait mode */
		cpu_irq_enable();
  400fc8:	4c52      	ldr	r4, [pc, #328]	; (401114 <pmc_sleep+0x224>)
  400fca:	2301      	movs	r3, #1
  400fcc:	7023      	strb	r3, [r4, #0]
  400fce:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  400fd2:	b662      	cpsie	i

		pmc_enable_waitmode();
  400fd4:	4b57      	ldr	r3, [pc, #348]	; (401134 <pmc_sleep+0x244>)
  400fd6:	4798      	blx	r3
  __ASM volatile ("cpsid i" : : : "memory");
  400fd8:	b672      	cpsid	i
  400fda:	f3bf 8f5f 	dmb	sy

		cpu_irq_disable();
  400fde:	2300      	movs	r3, #0
  400fe0:	7023      	strb	r3, [r4, #0]
	if (CKGR_MOR_MOSCXTBY == (osc_setting & CKGR_MOR_MOSCXTBY)) {
  400fe2:	f017 0f02 	tst.w	r7, #2
  400fe6:	d055      	beq.n	401094 <pmc_sleep+0x1a4>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  400fe8:	4a4d      	ldr	r2, [pc, #308]	; (401120 <pmc_sleep+0x230>)
  400fea:	6a13      	ldr	r3, [r2, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
  400fec:	4952      	ldr	r1, [pc, #328]	; (401138 <pmc_sleep+0x248>)
  400fee:	4019      	ands	r1, r3
  400ff0:	4b52      	ldr	r3, [pc, #328]	; (40113c <pmc_sleep+0x24c>)
  400ff2:	430b      	orrs	r3, r1
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  400ff4:	6213      	str	r3, [r2, #32]
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCEN &
  400ff6:	6a11      	ldr	r1, [r2, #32]
				| CKGR_MOR_KEY_PASSWD;
  400ff8:	4b51      	ldr	r3, [pc, #324]	; (401140 <pmc_sleep+0x250>)
  400ffa:	400b      	ands	r3, r1
  400ffc:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCEN &
  401000:	6213      	str	r3, [r2, #32]
	if (pll0_setting & CKGR_PLLAR_MULA_Msk) {
  401002:	4b50      	ldr	r3, [pc, #320]	; (401144 <pmc_sleep+0x254>)
  401004:	4033      	ands	r3, r6
  401006:	2b00      	cmp	r3, #0
  401008:	d06e      	beq.n	4010e8 <pmc_sleep+0x1f8>
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | pll0_setting;
  40100a:	f046 5600 	orr.w	r6, r6, #536870912	; 0x20000000
  40100e:	4b44      	ldr	r3, [pc, #272]	; (401120 <pmc_sleep+0x230>)
  401010:	629e      	str	r6, [r3, #40]	; 0x28
		pll_sr |= PMC_SR_LOCKA;
  401012:	2102      	movs	r1, #2
	switch(mck_setting & PMC_MCKR_CSS_Msk) {
  401014:	f1b9 0f02 	cmp.w	r9, #2
  401018:	d104      	bne.n	401024 <pmc_sleep+0x134>
		while (!(PMC->PMC_SR & PMC_SR_LOCKA));
  40101a:	4a41      	ldr	r2, [pc, #260]	; (401120 <pmc_sleep+0x230>)
  40101c:	6e93      	ldr	r3, [r2, #104]	; 0x68
  40101e:	f013 0f02 	tst.w	r3, #2
  401022:	d0fb      	beq.n	40101c <pmc_sleep+0x12c>
	mckr = PMC->PMC_MCKR;
  401024:	4a3e      	ldr	r2, [pc, #248]	; (401120 <pmc_sleep+0x230>)
  401026:	6b13      	ldr	r3, [r2, #48]	; 0x30
	PMC->PMC_MCKR = (mckr & ~PMC_MCKR_PRES_Msk)
  401028:	f023 0370 	bic.w	r3, r3, #112	; 0x70
		| (mck_setting & PMC_MCKR_PRES_Msk);
  40102c:	f005 0070 	and.w	r0, r5, #112	; 0x70
  401030:	4303      	orrs	r3, r0
	PMC->PMC_MCKR = (mckr & ~PMC_MCKR_PRES_Msk)
  401032:	6313      	str	r3, [r2, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY));
  401034:	6e93      	ldr	r3, [r2, #104]	; 0x68
  401036:	f013 0f08 	tst.w	r3, #8
  40103a:	d0fb      	beq.n	401034 <pmc_sleep+0x144>
	EFC0->EEFC_FMR = fmr_setting;
  40103c:	4b39      	ldr	r3, [pc, #228]	; (401124 <pmc_sleep+0x234>)
  40103e:	f8c3 8000 	str.w	r8, [r3]
	PMC->PMC_MCKR = mck_setting;
  401042:	f5a3 63c0 	sub.w	r3, r3, #1536	; 0x600
  401046:	631d      	str	r5, [r3, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY));
  401048:	461a      	mov	r2, r3
  40104a:	6e93      	ldr	r3, [r2, #104]	; 0x68
  40104c:	f013 0f08 	tst.w	r3, #8
  401050:	d0fb      	beq.n	40104a <pmc_sleep+0x15a>
	while (!(PMC->PMC_SR & pll_sr));
  401052:	4a33      	ldr	r2, [pc, #204]	; (401120 <pmc_sleep+0x230>)
  401054:	6e93      	ldr	r3, [r2, #104]	; 0x68
  401056:	420b      	tst	r3, r1
  401058:	d0fc      	beq.n	401054 <pmc_sleep+0x164>

#if (SAM4C || SAM4CM || SAM4CP)
		/* Restore the sub-system 1 */
		PMC->PMC_SCER = cpclk_backup | PMC_SCER_CPKEY_PASSWD;
#endif
		b_is_sleep_clock_used = false;
  40105a:	2200      	movs	r2, #0
  40105c:	4b2f      	ldr	r3, [pc, #188]	; (40111c <pmc_sleep+0x22c>)
  40105e:	701a      	strb	r2, [r3, #0]
		if (callback_clocks_restored) {
  401060:	4b39      	ldr	r3, [pc, #228]	; (401148 <pmc_sleep+0x258>)
  401062:	681b      	ldr	r3, [r3, #0]
  401064:	b11b      	cbz	r3, 40106e <pmc_sleep+0x17e>
			callback_clocks_restored();
  401066:	4798      	blx	r3
			callback_clocks_restored = NULL;
  401068:	2200      	movs	r2, #0
  40106a:	4b37      	ldr	r3, [pc, #220]	; (401148 <pmc_sleep+0x258>)
  40106c:	601a      	str	r2, [r3, #0]
		}
		cpu_irq_enable();
  40106e:	2201      	movs	r2, #1
  401070:	4b28      	ldr	r3, [pc, #160]	; (401114 <pmc_sleep+0x224>)
  401072:	701a      	strb	r2, [r3, #0]
  401074:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  401078:	b662      	cpsie	i
  40107a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	uint32_t mckr = PMC->PMC_MCKR;
  40107e:	4629      	mov	r1, r5
  401080:	e77e      	b.n	400f80 <pmc_sleep+0x90>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  401082:	f5a2 62c0 	sub.w	r2, r2, #1536	; 0x600
  401086:	6a11      	ldr	r1, [r2, #32]
  401088:	4b30      	ldr	r3, [pc, #192]	; (40114c <pmc_sleep+0x25c>)
  40108a:	400b      	ands	r3, r1
  40108c:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  401090:	6213      	str	r3, [r2, #32]
  401092:	e799      	b.n	400fc8 <pmc_sleep+0xd8>
	} else if (CKGR_MOR_MOSCXTEN == (osc_setting & CKGR_MOR_MOSCXTEN)) {
  401094:	f017 0f01 	tst.w	r7, #1
  401098:	d0b3      	beq.n	401002 <pmc_sleep+0x112>
		if (!(PMC->CKGR_MOR & CKGR_MOR_MOSCXTEN)) {
  40109a:	4b21      	ldr	r3, [pc, #132]	; (401120 <pmc_sleep+0x230>)
  40109c:	6a1b      	ldr	r3, [r3, #32]
  40109e:	f013 0f01 	tst.w	r3, #1
  4010a2:	d10b      	bne.n	4010bc <pmc_sleep+0x1cc>
			PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  4010a4:	491e      	ldr	r1, [pc, #120]	; (401120 <pmc_sleep+0x230>)
  4010a6:	6a0b      	ldr	r3, [r1, #32]
					CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN;
  4010a8:	4a29      	ldr	r2, [pc, #164]	; (401150 <pmc_sleep+0x260>)
  4010aa:	401a      	ands	r2, r3
  4010ac:	4b29      	ldr	r3, [pc, #164]	; (401154 <pmc_sleep+0x264>)
  4010ae:	4313      	orrs	r3, r2
			PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  4010b0:	620b      	str	r3, [r1, #32]
			while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  4010b2:	460a      	mov	r2, r1
  4010b4:	6e93      	ldr	r3, [r2, #104]	; 0x68
  4010b6:	f013 0f01 	tst.w	r3, #1
  4010ba:	d0fb      	beq.n	4010b4 <pmc_sleep+0x1c4>
		if (!(PMC->CKGR_MOR & CKGR_MOR_MOSCSEL)) {
  4010bc:	4b18      	ldr	r3, [pc, #96]	; (401120 <pmc_sleep+0x230>)
  4010be:	6a1b      	ldr	r3, [r3, #32]
  4010c0:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  4010c4:	d108      	bne.n	4010d8 <pmc_sleep+0x1e8>
			PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
  4010c6:	4a16      	ldr	r2, [pc, #88]	; (401120 <pmc_sleep+0x230>)
  4010c8:	6a11      	ldr	r1, [r2, #32]
  4010ca:	4b23      	ldr	r3, [pc, #140]	; (401158 <pmc_sleep+0x268>)
  4010cc:	430b      	orrs	r3, r1
  4010ce:	6213      	str	r3, [r2, #32]
			while (!(PMC->PMC_SR & PMC_SR_MOSCSELS));
  4010d0:	6e93      	ldr	r3, [r2, #104]	; 0x68
  4010d2:	f413 3f80 	tst.w	r3, #65536	; 0x10000
  4010d6:	d0fb      	beq.n	4010d0 <pmc_sleep+0x1e0>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCEN &
  4010d8:	4a11      	ldr	r2, [pc, #68]	; (401120 <pmc_sleep+0x230>)
  4010da:	6a11      	ldr	r1, [r2, #32]
					| CKGR_MOR_KEY_PASSWD;
  4010dc:	4b18      	ldr	r3, [pc, #96]	; (401140 <pmc_sleep+0x250>)
  4010de:	400b      	ands	r3, r1
  4010e0:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCEN &
  4010e4:	6213      	str	r3, [r2, #32]
  4010e6:	e78c      	b.n	401002 <pmc_sleep+0x112>
	uint32_t pll_sr = 0;
  4010e8:	2100      	movs	r1, #0
  4010ea:	e793      	b.n	401014 <pmc_sleep+0x124>

		break;
	}
#if (!(SAMG51 || SAMG53 || SAMG54))
	case SAM_PM_SMODE_BACKUP:
		SCB->SCR |= SCR_SLEEPDEEP;
  4010ec:	4a08      	ldr	r2, [pc, #32]	; (401110 <pmc_sleep+0x220>)
  4010ee:	6913      	ldr	r3, [r2, #16]
  4010f0:	f043 0304 	orr.w	r3, r3, #4
  4010f4:	6113      	str	r3, [r2, #16]
#if (SAM4S || SAM4E || SAM4N || SAM4C || SAM4CM || SAM4CP || SAMG55 || SAMV71 || SAMV70 || SAMS70 || SAME70)
		SUPC->SUPC_CR = SUPC_CR_KEY_PASSWD | SUPC_CR_VROFF_STOP_VREG;
  4010f6:	4a19      	ldr	r2, [pc, #100]	; (40115c <pmc_sleep+0x26c>)
  4010f8:	4b19      	ldr	r3, [pc, #100]	; (401160 <pmc_sleep+0x270>)
  4010fa:	601a      	str	r2, [r3, #0]
		cpu_irq_enable();
  4010fc:	2201      	movs	r2, #1
  4010fe:	4b05      	ldr	r3, [pc, #20]	; (401114 <pmc_sleep+0x224>)
  401100:	701a      	strb	r2, [r3, #0]
  401102:	f3bf 8f5f 	dmb	sy
  401106:	b662      	cpsie	i
  __ASM volatile ("wfi");
  401108:	bf30      	wfi
  40110a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40110e:	bf00      	nop
  401110:	e000ed00 	.word	0xe000ed00
  401114:	20400018 	.word	0x20400018
  401118:	00400ea1 	.word	0x00400ea1
  40111c:	204006e0 	.word	0x204006e0
  401120:	400e0600 	.word	0x400e0600
  401124:	400e0c00 	.word	0x400e0c00
  401128:	00370008 	.word	0x00370008
  40112c:	00400e2d 	.word	0x00400e2d
  401130:	fec8ffff 	.word	0xfec8ffff
  401134:	00400ea5 	.word	0x00400ea5
  401138:	fec8fffc 	.word	0xfec8fffc
  40113c:	01370002 	.word	0x01370002
  401140:	ffc8ff87 	.word	0xffc8ff87
  401144:	07ff0000 	.word	0x07ff0000
  401148:	204006e4 	.word	0x204006e4
  40114c:	ffc8fffe 	.word	0xffc8fffe
  401150:	ffc8fffc 	.word	0xffc8fffc
  401154:	00370001 	.word	0x00370001
  401158:	01370000 	.word	0x01370000
  40115c:	a5000004 	.word	0xa5000004
  401160:	400e1810 	.word	0x400e1810

00401164 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  401164:	e7fe      	b.n	401164 <Dummy_Handler>
	...

00401168 <Reset_Handler>:
{
  401168:	b500      	push	{lr}
  40116a:	b083      	sub	sp, #12
        if (pSrc != pDest) {
  40116c:	4b25      	ldr	r3, [pc, #148]	; (401204 <Reset_Handler+0x9c>)
  40116e:	4a26      	ldr	r2, [pc, #152]	; (401208 <Reset_Handler+0xa0>)
  401170:	429a      	cmp	r2, r3
  401172:	d010      	beq.n	401196 <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
  401174:	4b25      	ldr	r3, [pc, #148]	; (40120c <Reset_Handler+0xa4>)
  401176:	4a23      	ldr	r2, [pc, #140]	; (401204 <Reset_Handler+0x9c>)
  401178:	429a      	cmp	r2, r3
  40117a:	d20c      	bcs.n	401196 <Reset_Handler+0x2e>
  40117c:	3b01      	subs	r3, #1
  40117e:	1a9b      	subs	r3, r3, r2
  401180:	f023 0303 	bic.w	r3, r3, #3
  401184:	3304      	adds	r3, #4
  401186:	4413      	add	r3, r2
  401188:	491f      	ldr	r1, [pc, #124]	; (401208 <Reset_Handler+0xa0>)
                        *pDest++ = *pSrc++;
  40118a:	f851 0b04 	ldr.w	r0, [r1], #4
  40118e:	f842 0b04 	str.w	r0, [r2], #4
                for (; pDest < &_erelocate;) {
  401192:	429a      	cmp	r2, r3
  401194:	d1f9      	bne.n	40118a <Reset_Handler+0x22>
        for (pDest = &_szero; pDest < &_ezero;) {
  401196:	4b1e      	ldr	r3, [pc, #120]	; (401210 <Reset_Handler+0xa8>)
  401198:	4a1e      	ldr	r2, [pc, #120]	; (401214 <Reset_Handler+0xac>)
  40119a:	429a      	cmp	r2, r3
  40119c:	d20a      	bcs.n	4011b4 <Reset_Handler+0x4c>
  40119e:	3b01      	subs	r3, #1
  4011a0:	1a9b      	subs	r3, r3, r2
  4011a2:	f023 0303 	bic.w	r3, r3, #3
  4011a6:	3304      	adds	r3, #4
  4011a8:	4413      	add	r3, r2
                *pDest++ = 0;
  4011aa:	2100      	movs	r1, #0
  4011ac:	f842 1b04 	str.w	r1, [r2], #4
        for (pDest = &_szero; pDest < &_ezero;) {
  4011b0:	4293      	cmp	r3, r2
  4011b2:	d1fb      	bne.n	4011ac <Reset_Handler+0x44>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
  4011b4:	4a18      	ldr	r2, [pc, #96]	; (401218 <Reset_Handler+0xb0>)
  4011b6:	4b19      	ldr	r3, [pc, #100]	; (40121c <Reset_Handler+0xb4>)
  4011b8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
  4011bc:	6093      	str	r3, [r2, #8]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  4011be:	f3ef 8310 	mrs	r3, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = cpu_irq_is_enabled();
  4011c2:	fab3 f383 	clz	r3, r3
  4011c6:	095b      	lsrs	r3, r3, #5
  4011c8:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
  4011ca:	b672      	cpsid	i
  __ASM volatile ("dmb");
  4011cc:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  4011d0:	2200      	movs	r2, #0
  4011d2:	4b13      	ldr	r3, [pc, #76]	; (401220 <Reset_Handler+0xb8>)
  4011d4:	701a      	strb	r2, [r3, #0]
	return flags;
  4011d6:	9901      	ldr	r1, [sp, #4]
 */
__always_inline static void fpu_enable(void)
{
	irqflags_t flags;
	flags = cpu_irq_save();
	REG_CPACR |=  (0xFu << 20);
  4011d8:	4a12      	ldr	r2, [pc, #72]	; (401224 <Reset_Handler+0xbc>)
  4011da:	6813      	ldr	r3, [r2, #0]
  4011dc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
  4011e0:	6013      	str	r3, [r2, #0]
  __ASM volatile ("dsb");
  4011e2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  4011e6:	f3bf 8f6f 	isb	sy
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  4011ea:	b129      	cbz	r1, 4011f8 <Reset_Handler+0x90>
		cpu_irq_enable();
  4011ec:	2201      	movs	r2, #1
  4011ee:	4b0c      	ldr	r3, [pc, #48]	; (401220 <Reset_Handler+0xb8>)
  4011f0:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dmb");
  4011f2:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  4011f6:	b662      	cpsie	i
        __libc_init_array();
  4011f8:	4b0b      	ldr	r3, [pc, #44]	; (401228 <Reset_Handler+0xc0>)
  4011fa:	4798      	blx	r3
        main();
  4011fc:	4b0b      	ldr	r3, [pc, #44]	; (40122c <Reset_Handler+0xc4>)
  4011fe:	4798      	blx	r3
  401200:	e7fe      	b.n	401200 <Reset_Handler+0x98>
  401202:	bf00      	nop
  401204:	20400000 	.word	0x20400000
  401208:	00402a9c 	.word	0x00402a9c
  40120c:	2040044c 	.word	0x2040044c
  401210:	20400718 	.word	0x20400718
  401214:	2040044c 	.word	0x2040044c
  401218:	e000ed00 	.word	0xe000ed00
  40121c:	00400000 	.word	0x00400000
  401220:	20400018 	.word	0x20400018
  401224:	e000ed88 	.word	0xe000ed88
  401228:	00401a81 	.word	0x00401a81
  40122c:	0040151d 	.word	0x0040151d

00401230 <SystemCoreClockUpdate>:
}

void SystemCoreClockUpdate( void )
{
  /* Determine clock frequency according to clock register values */
  switch (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk)
  401230:	4b3b      	ldr	r3, [pc, #236]	; (401320 <SystemCoreClockUpdate+0xf0>)
  401232:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  401234:	f003 0303 	and.w	r3, r3, #3
  401238:	2b01      	cmp	r3, #1
  40123a:	d01d      	beq.n	401278 <SystemCoreClockUpdate+0x48>
  40123c:	b183      	cbz	r3, 401260 <SystemCoreClockUpdate+0x30>
  40123e:	2b02      	cmp	r3, #2
  401240:	d036      	beq.n	4012b0 <SystemCoreClockUpdate+0x80>

    default:
    break;
  }

  if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 )
  401242:	4b37      	ldr	r3, [pc, #220]	; (401320 <SystemCoreClockUpdate+0xf0>)
  401244:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  401246:	f003 0370 	and.w	r3, r3, #112	; 0x70
  40124a:	2b70      	cmp	r3, #112	; 0x70
  40124c:	d05f      	beq.n	40130e <SystemCoreClockUpdate+0xde>
  {
    SystemCoreClock /= 3U;
  }
  else
  {
    SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  40124e:	4b34      	ldr	r3, [pc, #208]	; (401320 <SystemCoreClockUpdate+0xf0>)
  401250:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  401252:	4934      	ldr	r1, [pc, #208]	; (401324 <SystemCoreClockUpdate+0xf4>)
  401254:	f3c2 1202 	ubfx	r2, r2, #4, #3
  401258:	680b      	ldr	r3, [r1, #0]
  40125a:	40d3      	lsrs	r3, r2
  40125c:	600b      	str	r3, [r1, #0]
  40125e:	4770      	bx	lr
      if ( SUPC->SUPC_SR & SUPC_SR_OSCSEL )
  401260:	4b31      	ldr	r3, [pc, #196]	; (401328 <SystemCoreClockUpdate+0xf8>)
  401262:	695b      	ldr	r3, [r3, #20]
  401264:	f013 0f80 	tst.w	r3, #128	; 0x80
        SystemCoreClock = CHIP_FREQ_XTAL_32K;
  401268:	bf14      	ite	ne
  40126a:	f44f 4200 	movne.w	r2, #32768	; 0x8000
        SystemCoreClock = CHIP_FREQ_SLCK_RC;
  40126e:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
  401272:	4b2c      	ldr	r3, [pc, #176]	; (401324 <SystemCoreClockUpdate+0xf4>)
  401274:	601a      	str	r2, [r3, #0]
  401276:	e7e4      	b.n	401242 <SystemCoreClockUpdate+0x12>
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  401278:	4b29      	ldr	r3, [pc, #164]	; (401320 <SystemCoreClockUpdate+0xf0>)
  40127a:	6a1b      	ldr	r3, [r3, #32]
  40127c:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  401280:	d003      	beq.n	40128a <SystemCoreClockUpdate+0x5a>
        SystemCoreClock = CHIP_FREQ_XTAL_12M;
  401282:	4a2a      	ldr	r2, [pc, #168]	; (40132c <SystemCoreClockUpdate+0xfc>)
  401284:	4b27      	ldr	r3, [pc, #156]	; (401324 <SystemCoreClockUpdate+0xf4>)
  401286:	601a      	str	r2, [r3, #0]
  401288:	e7db      	b.n	401242 <SystemCoreClockUpdate+0x12>
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  40128a:	4a29      	ldr	r2, [pc, #164]	; (401330 <SystemCoreClockUpdate+0x100>)
  40128c:	4b25      	ldr	r3, [pc, #148]	; (401324 <SystemCoreClockUpdate+0xf4>)
  40128e:	601a      	str	r2, [r3, #0]
        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  401290:	4b23      	ldr	r3, [pc, #140]	; (401320 <SystemCoreClockUpdate+0xf0>)
  401292:	6a1b      	ldr	r3, [r3, #32]
  401294:	f003 0370 	and.w	r3, r3, #112	; 0x70
  401298:	2b10      	cmp	r3, #16
  40129a:	d005      	beq.n	4012a8 <SystemCoreClockUpdate+0x78>
  40129c:	2b20      	cmp	r3, #32
  40129e:	d1d0      	bne.n	401242 <SystemCoreClockUpdate+0x12>
            SystemCoreClock *= 3U;
  4012a0:	4a22      	ldr	r2, [pc, #136]	; (40132c <SystemCoreClockUpdate+0xfc>)
  4012a2:	4b20      	ldr	r3, [pc, #128]	; (401324 <SystemCoreClockUpdate+0xf4>)
  4012a4:	601a      	str	r2, [r3, #0]
          break;
  4012a6:	e7cc      	b.n	401242 <SystemCoreClockUpdate+0x12>
            SystemCoreClock *= 2U;
  4012a8:	4a22      	ldr	r2, [pc, #136]	; (401334 <SystemCoreClockUpdate+0x104>)
  4012aa:	4b1e      	ldr	r3, [pc, #120]	; (401324 <SystemCoreClockUpdate+0xf4>)
  4012ac:	601a      	str	r2, [r3, #0]
          break;
  4012ae:	e7c8      	b.n	401242 <SystemCoreClockUpdate+0x12>
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  4012b0:	4b1b      	ldr	r3, [pc, #108]	; (401320 <SystemCoreClockUpdate+0xf0>)
  4012b2:	6a1b      	ldr	r3, [r3, #32]
  4012b4:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  4012b8:	d016      	beq.n	4012e8 <SystemCoreClockUpdate+0xb8>
        SystemCoreClock = CHIP_FREQ_XTAL_12M ;
  4012ba:	4a1c      	ldr	r2, [pc, #112]	; (40132c <SystemCoreClockUpdate+0xfc>)
  4012bc:	4b19      	ldr	r3, [pc, #100]	; (401324 <SystemCoreClockUpdate+0xf4>)
  4012be:	601a      	str	r2, [r3, #0]
      if ( (uint32_t) (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK )
  4012c0:	4b17      	ldr	r3, [pc, #92]	; (401320 <SystemCoreClockUpdate+0xf0>)
  4012c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4012c4:	f003 0303 	and.w	r3, r3, #3
  4012c8:	2b02      	cmp	r3, #2
  4012ca:	d1ba      	bne.n	401242 <SystemCoreClockUpdate+0x12>
        SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  4012cc:	4a14      	ldr	r2, [pc, #80]	; (401320 <SystemCoreClockUpdate+0xf0>)
  4012ce:	6a91      	ldr	r1, [r2, #40]	; 0x28
        SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  4012d0:	6a92      	ldr	r2, [r2, #40]	; 0x28
  4012d2:	4814      	ldr	r0, [pc, #80]	; (401324 <SystemCoreClockUpdate+0xf4>)
        SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  4012d4:	f3c1 410a 	ubfx	r1, r1, #16, #11
  4012d8:	6803      	ldr	r3, [r0, #0]
  4012da:	fb01 3303 	mla	r3, r1, r3, r3
        SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  4012de:	b2d2      	uxtb	r2, r2
  4012e0:	fbb3 f3f2 	udiv	r3, r3, r2
  4012e4:	6003      	str	r3, [r0, #0]
  4012e6:	e7ac      	b.n	401242 <SystemCoreClockUpdate+0x12>
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  4012e8:	4a11      	ldr	r2, [pc, #68]	; (401330 <SystemCoreClockUpdate+0x100>)
  4012ea:	4b0e      	ldr	r3, [pc, #56]	; (401324 <SystemCoreClockUpdate+0xf4>)
  4012ec:	601a      	str	r2, [r3, #0]
        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  4012ee:	4b0c      	ldr	r3, [pc, #48]	; (401320 <SystemCoreClockUpdate+0xf0>)
  4012f0:	6a1b      	ldr	r3, [r3, #32]
  4012f2:	f003 0370 	and.w	r3, r3, #112	; 0x70
  4012f6:	2b10      	cmp	r3, #16
  4012f8:	d005      	beq.n	401306 <SystemCoreClockUpdate+0xd6>
  4012fa:	2b20      	cmp	r3, #32
  4012fc:	d1e0      	bne.n	4012c0 <SystemCoreClockUpdate+0x90>
            SystemCoreClock *= 3U;
  4012fe:	4a0b      	ldr	r2, [pc, #44]	; (40132c <SystemCoreClockUpdate+0xfc>)
  401300:	4b08      	ldr	r3, [pc, #32]	; (401324 <SystemCoreClockUpdate+0xf4>)
  401302:	601a      	str	r2, [r3, #0]
          break;
  401304:	e7dc      	b.n	4012c0 <SystemCoreClockUpdate+0x90>
            SystemCoreClock *= 2U;
  401306:	4a0b      	ldr	r2, [pc, #44]	; (401334 <SystemCoreClockUpdate+0x104>)
  401308:	4b06      	ldr	r3, [pc, #24]	; (401324 <SystemCoreClockUpdate+0xf4>)
  40130a:	601a      	str	r2, [r3, #0]
          break;
  40130c:	e7d8      	b.n	4012c0 <SystemCoreClockUpdate+0x90>
    SystemCoreClock /= 3U;
  40130e:	4a05      	ldr	r2, [pc, #20]	; (401324 <SystemCoreClockUpdate+0xf4>)
  401310:	6813      	ldr	r3, [r2, #0]
  401312:	4909      	ldr	r1, [pc, #36]	; (401338 <SystemCoreClockUpdate+0x108>)
  401314:	fba1 1303 	umull	r1, r3, r1, r3
  401318:	085b      	lsrs	r3, r3, #1
  40131a:	6013      	str	r3, [r2, #0]
  40131c:	4770      	bx	lr
  40131e:	bf00      	nop
  401320:	400e0600 	.word	0x400e0600
  401324:	2040001c 	.word	0x2040001c
  401328:	400e1810 	.word	0x400e1810
  40132c:	00b71b00 	.word	0x00b71b00
  401330:	003d0900 	.word	0x003d0900
  401334:	007a1200 	.word	0x007a1200
  401338:	aaaaaaab 	.word	0xaaaaaaab

0040133c <system_init_flash>:
 * Initialize flash.
 */
void system_init_flash( uint32_t ul_clk )
{
  /* Set FWS for embedded Flash access according to operating frequency */
  if ( ul_clk < CHIP_FREQ_FWS_0 )
  40133c:	4b16      	ldr	r3, [pc, #88]	; (401398 <system_init_flash+0x5c>)
  40133e:	4298      	cmp	r0, r3
  401340:	d913      	bls.n	40136a <system_init_flash+0x2e>
  {
    EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  }
  else
  {
    if (ul_clk < CHIP_FREQ_FWS_1)
  401342:	4b16      	ldr	r3, [pc, #88]	; (40139c <system_init_flash+0x60>)
  401344:	4298      	cmp	r0, r3
  401346:	d915      	bls.n	401374 <system_init_flash+0x38>
    {
      EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
    }
    else
    {
      if (ul_clk < CHIP_FREQ_FWS_2)
  401348:	4b15      	ldr	r3, [pc, #84]	; (4013a0 <system_init_flash+0x64>)
  40134a:	4298      	cmp	r0, r3
  40134c:	d916      	bls.n	40137c <system_init_flash+0x40>
      {
        EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
      }
      else
      {
        if ( ul_clk < CHIP_FREQ_FWS_3 )
  40134e:	4b15      	ldr	r3, [pc, #84]	; (4013a4 <system_init_flash+0x68>)
  401350:	4298      	cmp	r0, r3
  401352:	d917      	bls.n	401384 <system_init_flash+0x48>
        {
          EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
        }
        else
        {
          if ( ul_clk < CHIP_FREQ_FWS_4 )
  401354:	4b14      	ldr	r3, [pc, #80]	; (4013a8 <system_init_flash+0x6c>)
  401356:	4298      	cmp	r0, r3
  401358:	d918      	bls.n	40138c <system_init_flash+0x50>
          {
            EFC->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
          }
          else
          {
            if ( ul_clk < CHIP_FREQ_FWS_5 )
  40135a:	4b14      	ldr	r3, [pc, #80]	; (4013ac <system_init_flash+0x70>)
  40135c:	4298      	cmp	r0, r3
            {
              EFC->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  40135e:	bf94      	ite	ls
  401360:	4a13      	ldrls	r2, [pc, #76]	; (4013b0 <system_init_flash+0x74>)
            }
            else
            {
              EFC->EEFC_FMR = EEFC_FMR_FWS(6)|EEFC_FMR_CLOE;
  401362:	4a14      	ldrhi	r2, [pc, #80]	; (4013b4 <system_init_flash+0x78>)
  401364:	4b14      	ldr	r3, [pc, #80]	; (4013b8 <system_init_flash+0x7c>)
  401366:	601a      	str	r2, [r3, #0]
  401368:	4770      	bx	lr
    EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  40136a:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  40136e:	4b12      	ldr	r3, [pc, #72]	; (4013b8 <system_init_flash+0x7c>)
  401370:	601a      	str	r2, [r3, #0]
  401372:	4770      	bx	lr
      EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  401374:	4a11      	ldr	r2, [pc, #68]	; (4013bc <system_init_flash+0x80>)
  401376:	4b10      	ldr	r3, [pc, #64]	; (4013b8 <system_init_flash+0x7c>)
  401378:	601a      	str	r2, [r3, #0]
  40137a:	4770      	bx	lr
        EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  40137c:	4a10      	ldr	r2, [pc, #64]	; (4013c0 <system_init_flash+0x84>)
  40137e:	4b0e      	ldr	r3, [pc, #56]	; (4013b8 <system_init_flash+0x7c>)
  401380:	601a      	str	r2, [r3, #0]
  401382:	4770      	bx	lr
          EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  401384:	4a0f      	ldr	r2, [pc, #60]	; (4013c4 <system_init_flash+0x88>)
  401386:	4b0c      	ldr	r3, [pc, #48]	; (4013b8 <system_init_flash+0x7c>)
  401388:	601a      	str	r2, [r3, #0]
  40138a:	4770      	bx	lr
            EFC->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
  40138c:	f04f 2204 	mov.w	r2, #67109888	; 0x4000400
  401390:	4b09      	ldr	r3, [pc, #36]	; (4013b8 <system_init_flash+0x7c>)
  401392:	601a      	str	r2, [r3, #0]
  401394:	4770      	bx	lr
  401396:	bf00      	nop
  401398:	015ef3bf 	.word	0x015ef3bf
  40139c:	02bde77f 	.word	0x02bde77f
  4013a0:	041cdb3f 	.word	0x041cdb3f
  4013a4:	057bceff 	.word	0x057bceff
  4013a8:	06dac2bf 	.word	0x06dac2bf
  4013ac:	0839b67f 	.word	0x0839b67f
  4013b0:	04000500 	.word	0x04000500
  4013b4:	04000600 	.word	0x04000600
  4013b8:	400e0c00 	.word	0x400e0c00
  4013bc:	04000100 	.word	0x04000100
  4013c0:	04000200 	.word	0x04000200
  4013c4:	04000300 	.word	0x04000300

004013c8 <BUT1_callback>:
int but2 = 0;
int but3 = 0;

void BUT1_callback(void)
{
	but1 = 1;
  4013c8:	2201      	movs	r2, #1
  4013ca:	4b01      	ldr	r3, [pc, #4]	; (4013d0 <BUT1_callback+0x8>)
  4013cc:	601a      	str	r2, [r3, #0]
  4013ce:	4770      	bx	lr
  4013d0:	204006e8 	.word	0x204006e8

004013d4 <BUT2_callback>:
}

void BUT2_callback(void)
{
	but2 = 1;
  4013d4:	2201      	movs	r2, #1
  4013d6:	4b01      	ldr	r3, [pc, #4]	; (4013dc <BUT2_callback+0x8>)
  4013d8:	601a      	str	r2, [r3, #0]
  4013da:	4770      	bx	lr
  4013dc:	204006ec 	.word	0x204006ec

004013e0 <BUT3_callback>:
}

void BUT3_callback(void)
{
	but3 = 1;
  4013e0:	2201      	movs	r2, #1
  4013e2:	4b01      	ldr	r3, [pc, #4]	; (4013e8 <BUT3_callback+0x8>)
  4013e4:	601a      	str	r2, [r3, #0]
  4013e6:	4770      	bx	lr
  4013e8:	204006f0 	.word	0x204006f0

004013ec <init>:
}

void init(void)
{
  4013ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  4013f0:	b082      	sub	sp, #8
	sysclk_init();
  4013f2:	4b3c      	ldr	r3, [pc, #240]	; (4014e4 <init+0xf8>)
  4013f4:	4798      	blx	r3
	WDT->WDT_MR = WDT_MR_WDDIS;
  4013f6:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  4013fa:	4b3b      	ldr	r3, [pc, #236]	; (4014e8 <init+0xfc>)
  4013fc:	605a      	str	r2, [r3, #4]
	pmc_enable_periph_clk(LED_PIO_ID);
  4013fe:	200c      	movs	r0, #12
  401400:	4e3a      	ldr	r6, [pc, #232]	; (4014ec <init+0x100>)
  401402:	47b0      	blx	r6
	pio_set_output(LED_PIO, LED_PIO_IDX_MASK, 0, 0, 0);
  401404:	4d3a      	ldr	r5, [pc, #232]	; (4014f0 <init+0x104>)
  401406:	2400      	movs	r4, #0
  401408:	9400      	str	r4, [sp, #0]
  40140a:	4623      	mov	r3, r4
  40140c:	4622      	mov	r2, r4
  40140e:	f44f 7180 	mov.w	r1, #256	; 0x100
  401412:	4628      	mov	r0, r5
  401414:	f8df a0f4 	ldr.w	sl, [pc, #244]	; 40150c <init+0x120>
  401418:	47d0      	blx	sl
	pmc_enable_periph_clk(BUT1_PIO_ID);
  40141a:	2010      	movs	r0, #16
  40141c:	47b0      	blx	r6
	pmc_enable_periph_clk(BUT2_PIO_ID);
  40141e:	200c      	movs	r0, #12
  401420:	47b0      	blx	r6
	pmc_enable_periph_clk(BUT3_PIO_ID);
  401422:	200a      	movs	r0, #10
  401424:	47b0      	blx	r6
	pio_configure(BUT1_PIO, PIO_INPUT, BUT1_PIO_IDX_MASK, PIO_PULLUP);
  401426:	f8df 80e8 	ldr.w	r8, [pc, #232]	; 401510 <init+0x124>
  40142a:	2301      	movs	r3, #1
  40142c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  401430:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
  401434:	4640      	mov	r0, r8
  401436:	f8df 90dc 	ldr.w	r9, [pc, #220]	; 401514 <init+0x128>
  40143a:	47c8      	blx	r9
	pio_configure(BUT2_PIO, PIO_INPUT, BUT2_PIO_IDX_MASK, PIO_PULLUP);
  40143c:	2301      	movs	r3, #1
  40143e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
  401442:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
  401446:	4628      	mov	r0, r5
  401448:	47c8      	blx	r9
	pio_configure(BUT3_PIO, PIO_INPUT, BUT3_PIO_IDX_MASK, PIO_PULLUP);
  40144a:	4f2a      	ldr	r7, [pc, #168]	; (4014f4 <init+0x108>)
  40144c:	2301      	movs	r3, #1
  40144e:	f44f 2200 	mov.w	r2, #524288	; 0x80000
  401452:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
  401456:	4638      	mov	r0, r7
  401458:	47c8      	blx	r9
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  40145a:	4b27      	ldr	r3, [pc, #156]	; (4014f8 <init+0x10c>)
  40145c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
  401460:	601a      	str	r2, [r3, #0]
    NVIC->IP[(uint32_t)(IRQn)]            = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for device specific Interrupts  */
  401462:	22c0      	movs	r2, #192	; 0xc0
  401464:	f883 2310 	strb.w	r2, [r3, #784]	; 0x310
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  401468:	f44f 5280 	mov.w	r2, #4096	; 0x1000
  40146c:	601a      	str	r2, [r3, #0]
    NVIC->IP[(uint32_t)(IRQn)]            = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for device specific Interrupts  */
  40146e:	2280      	movs	r2, #128	; 0x80
  401470:	f883 230c 	strb.w	r2, [r3, #780]	; 0x30c
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  401474:	f44f 6180 	mov.w	r1, #1024	; 0x400
  401478:	6019      	str	r1, [r3, #0]
    NVIC->IP[(uint32_t)(IRQn)]            = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for device specific Interrupts  */
  40147a:	f883 230a 	strb.w	r2, [r3, #778]	; 0x30a
	NVIC_SetPriority(BUT1_PIO_ID, BUT1_PRIORITY);
	NVIC_EnableIRQ(BUT2_PIO_ID);
	NVIC_SetPriority(BUT2_PIO_ID, BUT2_PRIORITY);
	NVIC_EnableIRQ(BUT3_PIO_ID);
	NVIC_SetPriority(BUT3_PIO_ID, BUT3_PRIORITY);
	pio_enable_interrupt(BUT1_PIO, BUT1_PIO_IDX_MASK);
  40147e:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  401482:	4640      	mov	r0, r8
  401484:	f8df 9090 	ldr.w	r9, [pc, #144]	; 401518 <init+0x12c>
  401488:	47c8      	blx	r9
	pio_enable_interrupt(BUT2_PIO, BUT2_PIO_IDX_MASK);
  40148a:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
  40148e:	4628      	mov	r0, r5
  401490:	47c8      	blx	r9
	pio_enable_interrupt(BUT3_PIO, BUT3_PIO_IDX_MASK);
  401492:	f44f 2100 	mov.w	r1, #524288	; 0x80000
  401496:	4638      	mov	r0, r7
  401498:	47c8      	blx	r9
	pmc_enable_periph_clk(BUZ_PIO_ID);
  40149a:	200c      	movs	r0, #12
  40149c:	47b0      	blx	r6
	pio_set_output(BUZ_PIO, BUZ_PIO_IDX_MASK, 0, 0, 0);
  40149e:	9400      	str	r4, [sp, #0]
  4014a0:	4623      	mov	r3, r4
  4014a2:	4622      	mov	r2, r4
  4014a4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
  4014a8:	4628      	mov	r0, r5
  4014aa:	47d0      	blx	sl
	pio_handler_set(BUT1_PIO, BUT1_PIO_ID, BUT1_PIO_IDX_MASK, PIO_IT_FALL_EDGE, BUT1_callback);
  4014ac:	4b13      	ldr	r3, [pc, #76]	; (4014fc <init+0x110>)
  4014ae:	9300      	str	r3, [sp, #0]
  4014b0:	2350      	movs	r3, #80	; 0x50
  4014b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  4014b6:	2110      	movs	r1, #16
  4014b8:	4640      	mov	r0, r8
  4014ba:	4c11      	ldr	r4, [pc, #68]	; (401500 <init+0x114>)
  4014bc:	47a0      	blx	r4
	pio_handler_set(BUT2_PIO, BUT2_PIO_ID, BUT2_PIO_IDX_MASK, PIO_IT_FALL_EDGE, BUT2_callback);
  4014be:	4b11      	ldr	r3, [pc, #68]	; (401504 <init+0x118>)
  4014c0:	9300      	str	r3, [sp, #0]
  4014c2:	2350      	movs	r3, #80	; 0x50
  4014c4:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
  4014c8:	210c      	movs	r1, #12
  4014ca:	4628      	mov	r0, r5
  4014cc:	47a0      	blx	r4
	pio_handler_set(BUT3_PIO, BUT3_PIO_ID, BUT3_PIO_IDX_MASK, PIO_IT_FALL_EDGE, BUT3_callback);
  4014ce:	4b0e      	ldr	r3, [pc, #56]	; (401508 <init+0x11c>)
  4014d0:	9300      	str	r3, [sp, #0]
  4014d2:	2350      	movs	r3, #80	; 0x50
  4014d4:	f44f 2200 	mov.w	r2, #524288	; 0x80000
  4014d8:	210a      	movs	r1, #10
  4014da:	4638      	mov	r0, r7
  4014dc:	47a0      	blx	r4
}
  4014de:	b002      	add	sp, #8
  4014e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4014e4:	00400891 	.word	0x00400891
  4014e8:	400e1850 	.word	0x400e1850
  4014ec:	00400e4d 	.word	0x00400e4d
  4014f0:	400e1200 	.word	0x400e1200
  4014f4:	400e0e00 	.word	0x400e0e00
  4014f8:	e000e100 	.word	0xe000e100
  4014fc:	004013c9 	.word	0x004013c9
  401500:	00400c59 	.word	0x00400c59
  401504:	004013d5 	.word	0x004013d5
  401508:	004013e1 	.word	0x004013e1
  40150c:	00400b11 	.word	0x00400b11
  401510:	400e1400 	.word	0x400e1400
  401514:	00400b39 	.word	0x00400b39
  401518:	00400bfb 	.word	0x00400bfb

0040151c <main>:

int main (void)
{
  40151c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  401520:	b091      	sub	sp, #68	; 0x44
	board_init();
  401522:	4b78      	ldr	r3, [pc, #480]	; (401704 <main+0x1e8>)
  401524:	4798      	blx	r3
	sysclk_init();
  401526:	4b78      	ldr	r3, [pc, #480]	; (401708 <main+0x1ec>)
  401528:	4798      	blx	r3
	init();
  40152a:	4b78      	ldr	r3, [pc, #480]	; (40170c <main+0x1f0>)
  40152c:	4798      	blx	r3
	song2.notes = n2;                         
	song2.times = t2;                        
	song2.len = sizeof(n2) / sizeof(n2[0]);
	song2.title = &"MARIO 2";

	song songs[] = {song1, song2};
  40152e:	4c78      	ldr	r4, [pc, #480]	; (401710 <main+0x1f4>)
  401530:	940b      	str	r4, [sp, #44]	; 0x2c
  401532:	4b78      	ldr	r3, [pc, #480]	; (401714 <main+0x1f8>)
  401534:	930c      	str	r3, [sp, #48]	; 0x30
  401536:	4b78      	ldr	r3, [pc, #480]	; (401718 <main+0x1fc>)
  401538:	930d      	str	r3, [sp, #52]	; 0x34
  40153a:	2338      	movs	r3, #56	; 0x38
  40153c:	930e      	str	r3, [sp, #56]	; 0x38
  40153e:	4b77      	ldr	r3, [pc, #476]	; (40171c <main+0x200>)
  401540:	930f      	str	r3, [sp, #60]	; 0x3c
	current_song = songs[0];
	
	gfx_mono_ssd1306_init();
  401542:	4b77      	ldr	r3, [pc, #476]	; (401720 <main+0x204>)
  401544:	4798      	blx	r3
	gfx_mono_draw_string(songs[current].title, 10, 10, &sysfont);
  401546:	4b77      	ldr	r3, [pc, #476]	; (401724 <main+0x208>)
  401548:	220a      	movs	r2, #10
  40154a:	4611      	mov	r1, r2
  40154c:	4620      	mov	r0, r4
  40154e:	4c76      	ldr	r4, [pc, #472]	; (401728 <main+0x20c>)
  401550:	47a0      	blx	r4
	current_song = songs[0];
  401552:	234c      	movs	r3, #76	; 0x4c
  401554:	9303      	str	r3, [sp, #12]
  401556:	4b75      	ldr	r3, [pc, #468]	; (40172c <main+0x210>)
  401558:	9305      	str	r3, [sp, #20]
  40155a:	4b75      	ldr	r3, [pc, #468]	; (401730 <main+0x214>)
  40155c:	9304      	str	r3, [sp, #16]
	size_t step = 0;
  40155e:	f04f 0b00 	mov.w	fp, #0
	int pause = 1;
  401562:	2301      	movs	r3, #1
  401564:	9301      	str	r3, [sp, #4]
	int current = 0;
  401566:	f8cd b008 	str.w	fp, [sp, #8]
					delay_us(delay_time);					   
					pio_clear(PIOC, LED_PIO_IDX_MASK); 
					pio_clear(PIOC, BUZ_PIO_IDX_MASK); 
					delay_us(delay_time);
				}
				delay_ms(note_time);
  40156a:	4d72      	ldr	r5, [pc, #456]	; (401734 <main+0x218>)
					pio_set(PIOC, LED_PIO_IDX_MASK);   
  40156c:	f8df a1fc 	ldr.w	sl, [pc, #508]	; 40176c <main+0x250>
  401570:	e001      	b.n	401576 <main+0x5a>
				
				step++;
			} else {
				pause = 0;
				step = 0;
  401572:	f04f 0b00 	mov.w	fp, #0
		if (pause == 1) {
  401576:	9b01      	ldr	r3, [sp, #4]
  401578:	b99b      	cbnz	r3, 4015a2 <main+0x86>
		if (but1){
  40157a:	4b6f      	ldr	r3, [pc, #444]	; (401738 <main+0x21c>)
  40157c:	681b      	ldr	r3, [r3, #0]
  40157e:	b11b      	cbz	r3, 401588 <main+0x6c>
			but1 = 0;
  401580:	2300      	movs	r3, #0
  401582:	4a6d      	ldr	r2, [pc, #436]	; (401738 <main+0x21c>)
  401584:	6013      	str	r3, [r2, #0]
			pause = 0;
  401586:	9301      	str	r3, [sp, #4]
		if (but2){
  401588:	4b6c      	ldr	r3, [pc, #432]	; (40173c <main+0x220>)
  40158a:	681b      	ldr	r3, [r3, #0]
  40158c:	b16b      	cbz	r3, 4015aa <main+0x8e>
			but2 = 0;
  40158e:	2200      	movs	r2, #0
  401590:	4b6a      	ldr	r3, [pc, #424]	; (40173c <main+0x220>)
  401592:	601a      	str	r2, [r3, #0]
		if (but3){
  401594:	4b6a      	ldr	r3, [pc, #424]	; (401740 <main+0x224>)
  401596:	681b      	ldr	r3, [r3, #0]
  401598:	2b00      	cmp	r3, #0
  40159a:	d163      	bne.n	401664 <main+0x148>
  40159c:	2301      	movs	r3, #1
  40159e:	9301      	str	r3, [sp, #4]
  4015a0:	e7e9      	b.n	401576 <main+0x5a>
			pmc_sleep(SAM_PM_SMODE_SLEEP_WFI);
  4015a2:	2002      	movs	r0, #2
  4015a4:	4b67      	ldr	r3, [pc, #412]	; (401744 <main+0x228>)
  4015a6:	4798      	blx	r3
  4015a8:	e7e7      	b.n	40157a <main+0x5e>
		if (but3){
  4015aa:	4b65      	ldr	r3, [pc, #404]	; (401740 <main+0x224>)
  4015ac:	681b      	ldr	r3, [r3, #0]
  4015ae:	b1fb      	cbz	r3, 4015f0 <main+0xd4>
			but3 = 0;
  4015b0:	2200      	movs	r2, #0
  4015b2:	4b63      	ldr	r3, [pc, #396]	; (401740 <main+0x224>)
  4015b4:	601a      	str	r2, [r3, #0]
			if (current == 0)
  4015b6:	9b02      	ldr	r3, [sp, #8]
  4015b8:	2b00      	cmp	r3, #0
  4015ba:	d056      	beq.n	40166a <main+0x14e>
				current_song = songs[current];
  4015bc:	234c      	movs	r3, #76	; 0x4c
  4015be:	9303      	str	r3, [sp, #12]
  4015c0:	4b5a      	ldr	r3, [pc, #360]	; (40172c <main+0x210>)
  4015c2:	9305      	str	r3, [sp, #20]
  4015c4:	4b5a      	ldr	r3, [pc, #360]	; (401730 <main+0x214>)
  4015c6:	9304      	str	r3, [sp, #16]
				current = 0;
  4015c8:	9202      	str	r2, [sp, #8]
			gfx_mono_draw_string("		", 10, 10, &sysfont);
  4015ca:	4e56      	ldr	r6, [pc, #344]	; (401724 <main+0x208>)
  4015cc:	4633      	mov	r3, r6
  4015ce:	220a      	movs	r2, #10
  4015d0:	4611      	mov	r1, r2
  4015d2:	485d      	ldr	r0, [pc, #372]	; (401748 <main+0x22c>)
  4015d4:	4c54      	ldr	r4, [pc, #336]	; (401728 <main+0x20c>)
  4015d6:	47a0      	blx	r4
			gfx_mono_draw_string(songs[current].title, 10, 10, &sysfont);
  4015d8:	4633      	mov	r3, r6
  4015da:	220a      	movs	r2, #10
  4015dc:	4611      	mov	r1, r2
  4015de:	ae10      	add	r6, sp, #64	; 0x40
  4015e0:	9802      	ldr	r0, [sp, #8]
  4015e2:	eb06 1000 	add.w	r0, r6, r0, lsl #4
  4015e6:	f850 0c14 	ldr.w	r0, [r0, #-20]
  4015ea:	47a0      	blx	r4
			step = 0;
  4015ec:	f04f 0b00 	mov.w	fp, #0
		if (!pause){
  4015f0:	9e01      	ldr	r6, [sp, #4]
  4015f2:	2e00      	cmp	r6, #0
  4015f4:	d1bf      	bne.n	401576 <main+0x5a>
			if (step < current_song.len){
  4015f6:	9b03      	ldr	r3, [sp, #12]
  4015f8:	459b      	cmp	fp, r3
  4015fa:	d2ba      	bcs.n	401572 <main+0x56>
				int note_time = 800 / current_song.times[step];				
  4015fc:	9b05      	ldr	r3, [sp, #20]
  4015fe:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
  401602:	f44f 7348 	mov.w	r3, #800	; 0x320
  401606:	fb93 f3f0 	sdiv	r3, r3, r0
  40160a:	4619      	mov	r1, r3
  40160c:	9306      	str	r3, [sp, #24]
				int f = current_song.notes[step];
  40160e:	9b04      	ldr	r3, [sp, #16]
  401610:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
				int delay_time = 500000 / f;
  401614:	4a4d      	ldr	r2, [pc, #308]	; (40174c <main+0x230>)
  401616:	fb92 f9f3 	sdiv	r9, r2, r3
				int n_f = (note_time * f) / 1000;
  40161a:	fb03 f301 	mul.w	r3, r3, r1
  40161e:	4a4c      	ldr	r2, [pc, #304]	; (401750 <main+0x234>)
  401620:	fb82 2803 	smull	r2, r8, r2, r3
  401624:	17db      	asrs	r3, r3, #31
  401626:	ebc3 13a8 	rsb	r3, r3, r8, asr #6
				for (int i = 0; i < n_f; i++)
  40162a:	9307      	str	r3, [sp, #28]
  40162c:	2b00      	cmp	r3, #0
  40162e:	dd4e      	ble.n	4016ce <main+0x1b2>
					delay_us(delay_time);					   
  401630:	4b48      	ldr	r3, [pc, #288]	; (401754 <main+0x238>)
  401632:	fba9 0103 	umull	r0, r1, r9, r3
  401636:	464a      	mov	r2, r9
  401638:	17d3      	asrs	r3, r2, #31
  40163a:	4c46      	ldr	r4, [pc, #280]	; (401754 <main+0x238>)
  40163c:	fb04 1103 	mla	r1, r4, r3, r1
  401640:	4a45      	ldr	r2, [pc, #276]	; (401758 <main+0x23c>)
  401642:	2300      	movs	r3, #0
  401644:	4f45      	ldr	r7, [pc, #276]	; (40175c <main+0x240>)
  401646:	f04f 0800 	mov.w	r8, #0
  40164a:	183f      	adds	r7, r7, r0
  40164c:	eb48 0801 	adc.w	r8, r8, r1
  401650:	4638      	mov	r0, r7
  401652:	4641      	mov	r1, r8
  401654:	4c42      	ldr	r4, [pc, #264]	; (401760 <main+0x244>)
  401656:	47a0      	blx	r4
  401658:	9000      	str	r0, [sp, #0]
  40165a:	4634      	mov	r4, r6
					pio_set(PIOC, LED_PIO_IDX_MASK);   
  40165c:	4e41      	ldr	r6, [pc, #260]	; (401764 <main+0x248>)
  40165e:	f8dd 801c 	ldr.w	r8, [sp, #28]
  401662:	e01b      	b.n	40169c <main+0x180>
			pause = 1;
  401664:	2301      	movs	r3, #1
  401666:	9301      	str	r3, [sp, #4]
  401668:	e7a2      	b.n	4015b0 <main+0x94>
				current_song = songs[current];
  40166a:	2338      	movs	r3, #56	; 0x38
  40166c:	9303      	str	r3, [sp, #12]
  40166e:	4b2a      	ldr	r3, [pc, #168]	; (401718 <main+0x1fc>)
  401670:	9305      	str	r3, [sp, #20]
  401672:	4b28      	ldr	r3, [pc, #160]	; (401714 <main+0x1f8>)
  401674:	9304      	str	r3, [sp, #16]
				current = 1;
  401676:	2301      	movs	r3, #1
  401678:	9302      	str	r3, [sp, #8]
  40167a:	e7a6      	b.n	4015ca <main+0xae>
					delay_us(delay_time);					   
  40167c:	2033      	movs	r0, #51	; 0x33
  40167e:	47a8      	blx	r5
					pio_clear(PIOC, LED_PIO_IDX_MASK); 
  401680:	f44f 7180 	mov.w	r1, #256	; 0x100
  401684:	4650      	mov	r0, sl
  401686:	4f38      	ldr	r7, [pc, #224]	; (401768 <main+0x24c>)
  401688:	47b8      	blx	r7
					pio_clear(PIOC, BUZ_PIO_IDX_MASK); 
  40168a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
  40168e:	4650      	mov	r0, sl
  401690:	47b8      	blx	r7
					delay_us(delay_time);
  401692:	2033      	movs	r0, #51	; 0x33
  401694:	47a8      	blx	r5
				for (int i = 0; i < n_f; i++)
  401696:	3401      	adds	r4, #1
  401698:	45a0      	cmp	r8, r4
  40169a:	d018      	beq.n	4016ce <main+0x1b2>
					pio_set(PIOC, LED_PIO_IDX_MASK);   
  40169c:	f44f 7180 	mov.w	r1, #256	; 0x100
  4016a0:	4650      	mov	r0, sl
  4016a2:	47b0      	blx	r6
					pio_set(PIOC, BUZ_PIO_IDX_MASK);   
  4016a4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
  4016a8:	4650      	mov	r0, sl
  4016aa:	47b0      	blx	r6
					delay_us(delay_time);					   
  4016ac:	f1b9 0f00 	cmp.w	r9, #0
  4016b0:	d0e4      	beq.n	40167c <main+0x160>
  4016b2:	9800      	ldr	r0, [sp, #0]
  4016b4:	47a8      	blx	r5
					pio_clear(PIOC, LED_PIO_IDX_MASK); 
  4016b6:	f44f 7180 	mov.w	r1, #256	; 0x100
  4016ba:	4650      	mov	r0, sl
  4016bc:	4f2a      	ldr	r7, [pc, #168]	; (401768 <main+0x24c>)
  4016be:	47b8      	blx	r7
					pio_clear(PIOC, BUZ_PIO_IDX_MASK); 
  4016c0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
  4016c4:	4650      	mov	r0, sl
  4016c6:	47b8      	blx	r7
					delay_us(delay_time);
  4016c8:	9800      	ldr	r0, [sp, #0]
  4016ca:	47a8      	blx	r5
  4016cc:	e7e3      	b.n	401696 <main+0x17a>
				delay_ms(note_time);
  4016ce:	9806      	ldr	r0, [sp, #24]
  4016d0:	b1a8      	cbz	r0, 4016fe <main+0x1e2>
  4016d2:	4601      	mov	r1, r0
  4016d4:	17c7      	asrs	r7, r0, #31
  4016d6:	481f      	ldr	r0, [pc, #124]	; (401754 <main+0x238>)
  4016d8:	fba1 0100 	umull	r0, r1, r1, r0
  4016dc:	4c1d      	ldr	r4, [pc, #116]	; (401754 <main+0x238>)
  4016de:	fb04 1107 	mla	r1, r4, r7, r1
  4016e2:	f241 722c 	movw	r2, #5932	; 0x172c
  4016e6:	2300      	movs	r3, #0
  4016e8:	f241 762b 	movw	r6, #5931	; 0x172b
  4016ec:	2700      	movs	r7, #0
  4016ee:	1980      	adds	r0, r0, r6
  4016f0:	4179      	adcs	r1, r7
  4016f2:	4c1b      	ldr	r4, [pc, #108]	; (401760 <main+0x244>)
  4016f4:	47a0      	blx	r4
  4016f6:	47a8      	blx	r5
				step++;
  4016f8:	f10b 0b01 	add.w	fp, fp, #1
  4016fc:	e73b      	b.n	401576 <main+0x5a>
				delay_ms(note_time);
  4016fe:	2033      	movs	r0, #51	; 0x33
  401700:	47a8      	blx	r5
  401702:	e7f9      	b.n	4016f8 <main+0x1dc>
  401704:	00400901 	.word	0x00400901
  401708:	00400891 	.word	0x00400891
  40170c:	004013ed 	.word	0x004013ed
  401710:	00402638 	.word	0x00402638
  401714:	0040277c 	.word	0x0040277c
  401718:	0040298c 	.word	0x0040298c
  40171c:	00402640 	.word	0x00402640
  401720:	00400571 	.word	0x00400571
  401724:	2040000c 	.word	0x2040000c
  401728:	004004d9 	.word	0x004004d9
  40172c:	0040285c 	.word	0x0040285c
  401730:	0040264c 	.word	0x0040264c
  401734:	20400001 	.word	0x20400001
  401738:	204006e8 	.word	0x204006e8
  40173c:	204006ec 	.word	0x204006ec
  401740:	204006f0 	.word	0x204006f0
  401744:	00400ef1 	.word	0x00400ef1
  401748:	00402648 	.word	0x00402648
  40174c:	0007a120 	.word	0x0007a120
  401750:	10624dd3 	.word	0x10624dd3
  401754:	11e1a300 	.word	0x11e1a300
  401758:	005a83e0 	.word	0x005a83e0
  40175c:	005a83df 	.word	0x005a83df
  401760:	00401771 	.word	0x00401771
  401764:	00400a41 	.word	0x00400a41
  401768:	00400a45 	.word	0x00400a45
  40176c:	400e1200 	.word	0x400e1200

00401770 <__aeabi_uldivmod>:
  401770:	b953      	cbnz	r3, 401788 <__aeabi_uldivmod+0x18>
  401772:	b94a      	cbnz	r2, 401788 <__aeabi_uldivmod+0x18>
  401774:	2900      	cmp	r1, #0
  401776:	bf08      	it	eq
  401778:	2800      	cmpeq	r0, #0
  40177a:	bf1c      	itt	ne
  40177c:	f04f 31ff 	movne.w	r1, #4294967295
  401780:	f04f 30ff 	movne.w	r0, #4294967295
  401784:	f000 b97a 	b.w	401a7c <__aeabi_idiv0>
  401788:	f1ad 0c08 	sub.w	ip, sp, #8
  40178c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
  401790:	f000 f806 	bl	4017a0 <__udivmoddi4>
  401794:	f8dd e004 	ldr.w	lr, [sp, #4]
  401798:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  40179c:	b004      	add	sp, #16
  40179e:	4770      	bx	lr

004017a0 <__udivmoddi4>:
  4017a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  4017a4:	468c      	mov	ip, r1
  4017a6:	460d      	mov	r5, r1
  4017a8:	4604      	mov	r4, r0
  4017aa:	9e08      	ldr	r6, [sp, #32]
  4017ac:	2b00      	cmp	r3, #0
  4017ae:	d151      	bne.n	401854 <__udivmoddi4+0xb4>
  4017b0:	428a      	cmp	r2, r1
  4017b2:	4617      	mov	r7, r2
  4017b4:	d96d      	bls.n	401892 <__udivmoddi4+0xf2>
  4017b6:	fab2 fe82 	clz	lr, r2
  4017ba:	f1be 0f00 	cmp.w	lr, #0
  4017be:	d00b      	beq.n	4017d8 <__udivmoddi4+0x38>
  4017c0:	f1ce 0c20 	rsb	ip, lr, #32
  4017c4:	fa01 f50e 	lsl.w	r5, r1, lr
  4017c8:	fa20 fc0c 	lsr.w	ip, r0, ip
  4017cc:	fa02 f70e 	lsl.w	r7, r2, lr
  4017d0:	ea4c 0c05 	orr.w	ip, ip, r5
  4017d4:	fa00 f40e 	lsl.w	r4, r0, lr
  4017d8:	ea4f 4a17 	mov.w	sl, r7, lsr #16
  4017dc:	0c25      	lsrs	r5, r4, #16
  4017de:	fbbc f8fa 	udiv	r8, ip, sl
  4017e2:	fa1f f987 	uxth.w	r9, r7
  4017e6:	fb0a cc18 	mls	ip, sl, r8, ip
  4017ea:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
  4017ee:	fb08 f309 	mul.w	r3, r8, r9
  4017f2:	42ab      	cmp	r3, r5
  4017f4:	d90a      	bls.n	40180c <__udivmoddi4+0x6c>
  4017f6:	19ed      	adds	r5, r5, r7
  4017f8:	f108 32ff 	add.w	r2, r8, #4294967295
  4017fc:	f080 8123 	bcs.w	401a46 <__udivmoddi4+0x2a6>
  401800:	42ab      	cmp	r3, r5
  401802:	f240 8120 	bls.w	401a46 <__udivmoddi4+0x2a6>
  401806:	f1a8 0802 	sub.w	r8, r8, #2
  40180a:	443d      	add	r5, r7
  40180c:	1aed      	subs	r5, r5, r3
  40180e:	b2a4      	uxth	r4, r4
  401810:	fbb5 f0fa 	udiv	r0, r5, sl
  401814:	fb0a 5510 	mls	r5, sl, r0, r5
  401818:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
  40181c:	fb00 f909 	mul.w	r9, r0, r9
  401820:	45a1      	cmp	r9, r4
  401822:	d909      	bls.n	401838 <__udivmoddi4+0x98>
  401824:	19e4      	adds	r4, r4, r7
  401826:	f100 33ff 	add.w	r3, r0, #4294967295
  40182a:	f080 810a 	bcs.w	401a42 <__udivmoddi4+0x2a2>
  40182e:	45a1      	cmp	r9, r4
  401830:	f240 8107 	bls.w	401a42 <__udivmoddi4+0x2a2>
  401834:	3802      	subs	r0, #2
  401836:	443c      	add	r4, r7
  401838:	eba4 0409 	sub.w	r4, r4, r9
  40183c:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  401840:	2100      	movs	r1, #0
  401842:	2e00      	cmp	r6, #0
  401844:	d061      	beq.n	40190a <__udivmoddi4+0x16a>
  401846:	fa24 f40e 	lsr.w	r4, r4, lr
  40184a:	2300      	movs	r3, #0
  40184c:	6034      	str	r4, [r6, #0]
  40184e:	6073      	str	r3, [r6, #4]
  401850:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  401854:	428b      	cmp	r3, r1
  401856:	d907      	bls.n	401868 <__udivmoddi4+0xc8>
  401858:	2e00      	cmp	r6, #0
  40185a:	d054      	beq.n	401906 <__udivmoddi4+0x166>
  40185c:	2100      	movs	r1, #0
  40185e:	e886 0021 	stmia.w	r6, {r0, r5}
  401862:	4608      	mov	r0, r1
  401864:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  401868:	fab3 f183 	clz	r1, r3
  40186c:	2900      	cmp	r1, #0
  40186e:	f040 808e 	bne.w	40198e <__udivmoddi4+0x1ee>
  401872:	42ab      	cmp	r3, r5
  401874:	d302      	bcc.n	40187c <__udivmoddi4+0xdc>
  401876:	4282      	cmp	r2, r0
  401878:	f200 80fa 	bhi.w	401a70 <__udivmoddi4+0x2d0>
  40187c:	1a84      	subs	r4, r0, r2
  40187e:	eb65 0503 	sbc.w	r5, r5, r3
  401882:	2001      	movs	r0, #1
  401884:	46ac      	mov	ip, r5
  401886:	2e00      	cmp	r6, #0
  401888:	d03f      	beq.n	40190a <__udivmoddi4+0x16a>
  40188a:	e886 1010 	stmia.w	r6, {r4, ip}
  40188e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  401892:	b912      	cbnz	r2, 40189a <__udivmoddi4+0xfa>
  401894:	2701      	movs	r7, #1
  401896:	fbb7 f7f2 	udiv	r7, r7, r2
  40189a:	fab7 fe87 	clz	lr, r7
  40189e:	f1be 0f00 	cmp.w	lr, #0
  4018a2:	d134      	bne.n	40190e <__udivmoddi4+0x16e>
  4018a4:	1beb      	subs	r3, r5, r7
  4018a6:	0c3a      	lsrs	r2, r7, #16
  4018a8:	fa1f fc87 	uxth.w	ip, r7
  4018ac:	2101      	movs	r1, #1
  4018ae:	fbb3 f8f2 	udiv	r8, r3, r2
  4018b2:	0c25      	lsrs	r5, r4, #16
  4018b4:	fb02 3318 	mls	r3, r2, r8, r3
  4018b8:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  4018bc:	fb0c f308 	mul.w	r3, ip, r8
  4018c0:	42ab      	cmp	r3, r5
  4018c2:	d907      	bls.n	4018d4 <__udivmoddi4+0x134>
  4018c4:	19ed      	adds	r5, r5, r7
  4018c6:	f108 30ff 	add.w	r0, r8, #4294967295
  4018ca:	d202      	bcs.n	4018d2 <__udivmoddi4+0x132>
  4018cc:	42ab      	cmp	r3, r5
  4018ce:	f200 80d1 	bhi.w	401a74 <__udivmoddi4+0x2d4>
  4018d2:	4680      	mov	r8, r0
  4018d4:	1aed      	subs	r5, r5, r3
  4018d6:	b2a3      	uxth	r3, r4
  4018d8:	fbb5 f0f2 	udiv	r0, r5, r2
  4018dc:	fb02 5510 	mls	r5, r2, r0, r5
  4018e0:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
  4018e4:	fb0c fc00 	mul.w	ip, ip, r0
  4018e8:	45a4      	cmp	ip, r4
  4018ea:	d907      	bls.n	4018fc <__udivmoddi4+0x15c>
  4018ec:	19e4      	adds	r4, r4, r7
  4018ee:	f100 33ff 	add.w	r3, r0, #4294967295
  4018f2:	d202      	bcs.n	4018fa <__udivmoddi4+0x15a>
  4018f4:	45a4      	cmp	ip, r4
  4018f6:	f200 80b8 	bhi.w	401a6a <__udivmoddi4+0x2ca>
  4018fa:	4618      	mov	r0, r3
  4018fc:	eba4 040c 	sub.w	r4, r4, ip
  401900:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  401904:	e79d      	b.n	401842 <__udivmoddi4+0xa2>
  401906:	4631      	mov	r1, r6
  401908:	4630      	mov	r0, r6
  40190a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40190e:	f1ce 0420 	rsb	r4, lr, #32
  401912:	fa05 f30e 	lsl.w	r3, r5, lr
  401916:	fa07 f70e 	lsl.w	r7, r7, lr
  40191a:	fa20 f804 	lsr.w	r8, r0, r4
  40191e:	0c3a      	lsrs	r2, r7, #16
  401920:	fa25 f404 	lsr.w	r4, r5, r4
  401924:	ea48 0803 	orr.w	r8, r8, r3
  401928:	fbb4 f1f2 	udiv	r1, r4, r2
  40192c:	ea4f 4518 	mov.w	r5, r8, lsr #16
  401930:	fb02 4411 	mls	r4, r2, r1, r4
  401934:	fa1f fc87 	uxth.w	ip, r7
  401938:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
  40193c:	fb01 f30c 	mul.w	r3, r1, ip
  401940:	42ab      	cmp	r3, r5
  401942:	fa00 f40e 	lsl.w	r4, r0, lr
  401946:	d909      	bls.n	40195c <__udivmoddi4+0x1bc>
  401948:	19ed      	adds	r5, r5, r7
  40194a:	f101 30ff 	add.w	r0, r1, #4294967295
  40194e:	f080 808a 	bcs.w	401a66 <__udivmoddi4+0x2c6>
  401952:	42ab      	cmp	r3, r5
  401954:	f240 8087 	bls.w	401a66 <__udivmoddi4+0x2c6>
  401958:	3902      	subs	r1, #2
  40195a:	443d      	add	r5, r7
  40195c:	1aeb      	subs	r3, r5, r3
  40195e:	fa1f f588 	uxth.w	r5, r8
  401962:	fbb3 f0f2 	udiv	r0, r3, r2
  401966:	fb02 3310 	mls	r3, r2, r0, r3
  40196a:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  40196e:	fb00 f30c 	mul.w	r3, r0, ip
  401972:	42ab      	cmp	r3, r5
  401974:	d907      	bls.n	401986 <__udivmoddi4+0x1e6>
  401976:	19ed      	adds	r5, r5, r7
  401978:	f100 38ff 	add.w	r8, r0, #4294967295
  40197c:	d26f      	bcs.n	401a5e <__udivmoddi4+0x2be>
  40197e:	42ab      	cmp	r3, r5
  401980:	d96d      	bls.n	401a5e <__udivmoddi4+0x2be>
  401982:	3802      	subs	r0, #2
  401984:	443d      	add	r5, r7
  401986:	1aeb      	subs	r3, r5, r3
  401988:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
  40198c:	e78f      	b.n	4018ae <__udivmoddi4+0x10e>
  40198e:	f1c1 0720 	rsb	r7, r1, #32
  401992:	fa22 f807 	lsr.w	r8, r2, r7
  401996:	408b      	lsls	r3, r1
  401998:	fa05 f401 	lsl.w	r4, r5, r1
  40199c:	ea48 0303 	orr.w	r3, r8, r3
  4019a0:	fa20 fe07 	lsr.w	lr, r0, r7
  4019a4:	ea4f 4c13 	mov.w	ip, r3, lsr #16
  4019a8:	40fd      	lsrs	r5, r7
  4019aa:	ea4e 0e04 	orr.w	lr, lr, r4
  4019ae:	fbb5 f9fc 	udiv	r9, r5, ip
  4019b2:	ea4f 441e 	mov.w	r4, lr, lsr #16
  4019b6:	fb0c 5519 	mls	r5, ip, r9, r5
  4019ba:	fa1f f883 	uxth.w	r8, r3
  4019be:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
  4019c2:	fb09 f408 	mul.w	r4, r9, r8
  4019c6:	42ac      	cmp	r4, r5
  4019c8:	fa02 f201 	lsl.w	r2, r2, r1
  4019cc:	fa00 fa01 	lsl.w	sl, r0, r1
  4019d0:	d908      	bls.n	4019e4 <__udivmoddi4+0x244>
  4019d2:	18ed      	adds	r5, r5, r3
  4019d4:	f109 30ff 	add.w	r0, r9, #4294967295
  4019d8:	d243      	bcs.n	401a62 <__udivmoddi4+0x2c2>
  4019da:	42ac      	cmp	r4, r5
  4019dc:	d941      	bls.n	401a62 <__udivmoddi4+0x2c2>
  4019de:	f1a9 0902 	sub.w	r9, r9, #2
  4019e2:	441d      	add	r5, r3
  4019e4:	1b2d      	subs	r5, r5, r4
  4019e6:	fa1f fe8e 	uxth.w	lr, lr
  4019ea:	fbb5 f0fc 	udiv	r0, r5, ip
  4019ee:	fb0c 5510 	mls	r5, ip, r0, r5
  4019f2:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
  4019f6:	fb00 f808 	mul.w	r8, r0, r8
  4019fa:	45a0      	cmp	r8, r4
  4019fc:	d907      	bls.n	401a0e <__udivmoddi4+0x26e>
  4019fe:	18e4      	adds	r4, r4, r3
  401a00:	f100 35ff 	add.w	r5, r0, #4294967295
  401a04:	d229      	bcs.n	401a5a <__udivmoddi4+0x2ba>
  401a06:	45a0      	cmp	r8, r4
  401a08:	d927      	bls.n	401a5a <__udivmoddi4+0x2ba>
  401a0a:	3802      	subs	r0, #2
  401a0c:	441c      	add	r4, r3
  401a0e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
  401a12:	eba4 0408 	sub.w	r4, r4, r8
  401a16:	fba0 8902 	umull	r8, r9, r0, r2
  401a1a:	454c      	cmp	r4, r9
  401a1c:	46c6      	mov	lr, r8
  401a1e:	464d      	mov	r5, r9
  401a20:	d315      	bcc.n	401a4e <__udivmoddi4+0x2ae>
  401a22:	d012      	beq.n	401a4a <__udivmoddi4+0x2aa>
  401a24:	b156      	cbz	r6, 401a3c <__udivmoddi4+0x29c>
  401a26:	ebba 030e 	subs.w	r3, sl, lr
  401a2a:	eb64 0405 	sbc.w	r4, r4, r5
  401a2e:	fa04 f707 	lsl.w	r7, r4, r7
  401a32:	40cb      	lsrs	r3, r1
  401a34:	431f      	orrs	r7, r3
  401a36:	40cc      	lsrs	r4, r1
  401a38:	6037      	str	r7, [r6, #0]
  401a3a:	6074      	str	r4, [r6, #4]
  401a3c:	2100      	movs	r1, #0
  401a3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  401a42:	4618      	mov	r0, r3
  401a44:	e6f8      	b.n	401838 <__udivmoddi4+0x98>
  401a46:	4690      	mov	r8, r2
  401a48:	e6e0      	b.n	40180c <__udivmoddi4+0x6c>
  401a4a:	45c2      	cmp	sl, r8
  401a4c:	d2ea      	bcs.n	401a24 <__udivmoddi4+0x284>
  401a4e:	ebb8 0e02 	subs.w	lr, r8, r2
  401a52:	eb69 0503 	sbc.w	r5, r9, r3
  401a56:	3801      	subs	r0, #1
  401a58:	e7e4      	b.n	401a24 <__udivmoddi4+0x284>
  401a5a:	4628      	mov	r0, r5
  401a5c:	e7d7      	b.n	401a0e <__udivmoddi4+0x26e>
  401a5e:	4640      	mov	r0, r8
  401a60:	e791      	b.n	401986 <__udivmoddi4+0x1e6>
  401a62:	4681      	mov	r9, r0
  401a64:	e7be      	b.n	4019e4 <__udivmoddi4+0x244>
  401a66:	4601      	mov	r1, r0
  401a68:	e778      	b.n	40195c <__udivmoddi4+0x1bc>
  401a6a:	3802      	subs	r0, #2
  401a6c:	443c      	add	r4, r7
  401a6e:	e745      	b.n	4018fc <__udivmoddi4+0x15c>
  401a70:	4608      	mov	r0, r1
  401a72:	e708      	b.n	401886 <__udivmoddi4+0xe6>
  401a74:	f1a8 0802 	sub.w	r8, r8, #2
  401a78:	443d      	add	r5, r7
  401a7a:	e72b      	b.n	4018d4 <__udivmoddi4+0x134>

00401a7c <__aeabi_idiv0>:
  401a7c:	4770      	bx	lr
  401a7e:	bf00      	nop

00401a80 <__libc_init_array>:
  401a80:	b570      	push	{r4, r5, r6, lr}
  401a82:	4e0f      	ldr	r6, [pc, #60]	; (401ac0 <__libc_init_array+0x40>)
  401a84:	4d0f      	ldr	r5, [pc, #60]	; (401ac4 <__libc_init_array+0x44>)
  401a86:	1b76      	subs	r6, r6, r5
  401a88:	10b6      	asrs	r6, r6, #2
  401a8a:	bf18      	it	ne
  401a8c:	2400      	movne	r4, #0
  401a8e:	d005      	beq.n	401a9c <__libc_init_array+0x1c>
  401a90:	3401      	adds	r4, #1
  401a92:	f855 3b04 	ldr.w	r3, [r5], #4
  401a96:	4798      	blx	r3
  401a98:	42a6      	cmp	r6, r4
  401a9a:	d1f9      	bne.n	401a90 <__libc_init_array+0x10>
  401a9c:	4e0a      	ldr	r6, [pc, #40]	; (401ac8 <__libc_init_array+0x48>)
  401a9e:	4d0b      	ldr	r5, [pc, #44]	; (401acc <__libc_init_array+0x4c>)
  401aa0:	1b76      	subs	r6, r6, r5
  401aa2:	f000 ffe5 	bl	402a70 <_init>
  401aa6:	10b6      	asrs	r6, r6, #2
  401aa8:	bf18      	it	ne
  401aaa:	2400      	movne	r4, #0
  401aac:	d006      	beq.n	401abc <__libc_init_array+0x3c>
  401aae:	3401      	adds	r4, #1
  401ab0:	f855 3b04 	ldr.w	r3, [r5], #4
  401ab4:	4798      	blx	r3
  401ab6:	42a6      	cmp	r6, r4
  401ab8:	d1f9      	bne.n	401aae <__libc_init_array+0x2e>
  401aba:	bd70      	pop	{r4, r5, r6, pc}
  401abc:	bd70      	pop	{r4, r5, r6, pc}
  401abe:	bf00      	nop
  401ac0:	00402a7c 	.word	0x00402a7c
  401ac4:	00402a7c 	.word	0x00402a7c
  401ac8:	00402a84 	.word	0x00402a84
  401acc:	00402a7c 	.word	0x00402a7c

00401ad0 <register_fini>:
  401ad0:	4b02      	ldr	r3, [pc, #8]	; (401adc <register_fini+0xc>)
  401ad2:	b113      	cbz	r3, 401ada <register_fini+0xa>
  401ad4:	4802      	ldr	r0, [pc, #8]	; (401ae0 <register_fini+0x10>)
  401ad6:	f000 b805 	b.w	401ae4 <atexit>
  401ada:	4770      	bx	lr
  401adc:	00000000 	.word	0x00000000
  401ae0:	00401af1 	.word	0x00401af1

00401ae4 <atexit>:
  401ae4:	2300      	movs	r3, #0
  401ae6:	4601      	mov	r1, r0
  401ae8:	461a      	mov	r2, r3
  401aea:	4618      	mov	r0, r3
  401aec:	f000 b81e 	b.w	401b2c <__register_exitproc>

00401af0 <__libc_fini_array>:
  401af0:	b538      	push	{r3, r4, r5, lr}
  401af2:	4c0a      	ldr	r4, [pc, #40]	; (401b1c <__libc_fini_array+0x2c>)
  401af4:	4d0a      	ldr	r5, [pc, #40]	; (401b20 <__libc_fini_array+0x30>)
  401af6:	1b64      	subs	r4, r4, r5
  401af8:	10a4      	asrs	r4, r4, #2
  401afa:	d00a      	beq.n	401b12 <__libc_fini_array+0x22>
  401afc:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
  401b00:	3b01      	subs	r3, #1
  401b02:	eb05 0583 	add.w	r5, r5, r3, lsl #2
  401b06:	3c01      	subs	r4, #1
  401b08:	f855 3904 	ldr.w	r3, [r5], #-4
  401b0c:	4798      	blx	r3
  401b0e:	2c00      	cmp	r4, #0
  401b10:	d1f9      	bne.n	401b06 <__libc_fini_array+0x16>
  401b12:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  401b16:	f000 bfb5 	b.w	402a84 <_fini>
  401b1a:	bf00      	nop
  401b1c:	00402a94 	.word	0x00402a94
  401b20:	00402a90 	.word	0x00402a90

00401b24 <__retarget_lock_acquire_recursive>:
  401b24:	4770      	bx	lr
  401b26:	bf00      	nop

00401b28 <__retarget_lock_release_recursive>:
  401b28:	4770      	bx	lr
  401b2a:	bf00      	nop

00401b2c <__register_exitproc>:
  401b2c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  401b30:	4d2c      	ldr	r5, [pc, #176]	; (401be4 <__register_exitproc+0xb8>)
  401b32:	4606      	mov	r6, r0
  401b34:	6828      	ldr	r0, [r5, #0]
  401b36:	4698      	mov	r8, r3
  401b38:	460f      	mov	r7, r1
  401b3a:	4691      	mov	r9, r2
  401b3c:	f7ff fff2 	bl	401b24 <__retarget_lock_acquire_recursive>
  401b40:	4b29      	ldr	r3, [pc, #164]	; (401be8 <__register_exitproc+0xbc>)
  401b42:	681c      	ldr	r4, [r3, #0]
  401b44:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
  401b48:	2b00      	cmp	r3, #0
  401b4a:	d03e      	beq.n	401bca <__register_exitproc+0x9e>
  401b4c:	685a      	ldr	r2, [r3, #4]
  401b4e:	2a1f      	cmp	r2, #31
  401b50:	dc1c      	bgt.n	401b8c <__register_exitproc+0x60>
  401b52:	f102 0e01 	add.w	lr, r2, #1
  401b56:	b176      	cbz	r6, 401b76 <__register_exitproc+0x4a>
  401b58:	eb03 0182 	add.w	r1, r3, r2, lsl #2
  401b5c:	2401      	movs	r4, #1
  401b5e:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
  401b62:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
  401b66:	4094      	lsls	r4, r2
  401b68:	4320      	orrs	r0, r4
  401b6a:	2e02      	cmp	r6, #2
  401b6c:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
  401b70:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
  401b74:	d023      	beq.n	401bbe <__register_exitproc+0x92>
  401b76:	3202      	adds	r2, #2
  401b78:	f8c3 e004 	str.w	lr, [r3, #4]
  401b7c:	6828      	ldr	r0, [r5, #0]
  401b7e:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
  401b82:	f7ff ffd1 	bl	401b28 <__retarget_lock_release_recursive>
  401b86:	2000      	movs	r0, #0
  401b88:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  401b8c:	4b17      	ldr	r3, [pc, #92]	; (401bec <__register_exitproc+0xc0>)
  401b8e:	b30b      	cbz	r3, 401bd4 <__register_exitproc+0xa8>
  401b90:	f44f 70c8 	mov.w	r0, #400	; 0x190
  401b94:	f3af 8000 	nop.w
  401b98:	4603      	mov	r3, r0
  401b9a:	b1d8      	cbz	r0, 401bd4 <__register_exitproc+0xa8>
  401b9c:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
  401ba0:	6002      	str	r2, [r0, #0]
  401ba2:	2100      	movs	r1, #0
  401ba4:	6041      	str	r1, [r0, #4]
  401ba6:	460a      	mov	r2, r1
  401ba8:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
  401bac:	f04f 0e01 	mov.w	lr, #1
  401bb0:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
  401bb4:	f8c0 118c 	str.w	r1, [r0, #396]	; 0x18c
  401bb8:	2e00      	cmp	r6, #0
  401bba:	d0dc      	beq.n	401b76 <__register_exitproc+0x4a>
  401bbc:	e7cc      	b.n	401b58 <__register_exitproc+0x2c>
  401bbe:	f8d3 118c 	ldr.w	r1, [r3, #396]	; 0x18c
  401bc2:	430c      	orrs	r4, r1
  401bc4:	f8c3 418c 	str.w	r4, [r3, #396]	; 0x18c
  401bc8:	e7d5      	b.n	401b76 <__register_exitproc+0x4a>
  401bca:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
  401bce:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
  401bd2:	e7bb      	b.n	401b4c <__register_exitproc+0x20>
  401bd4:	6828      	ldr	r0, [r5, #0]
  401bd6:	f7ff ffa7 	bl	401b28 <__retarget_lock_release_recursive>
  401bda:	f04f 30ff 	mov.w	r0, #4294967295
  401bde:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  401be2:	bf00      	nop
  401be4:	20400448 	.word	0x20400448
  401be8:	00402a6c 	.word	0x00402a6c
  401bec:	00000000 	.word	0x00000000

00401bf0 <sysfont_glyphs>:
	...
  401c10:	00300030 00300030 00300030 00300000     0.0.0.0.0.0...0.
  401c20:	00000030 00000000 00000000 006c006c     0...........l.l.
  401c30:	006c006c 00000000 00000000 00000000     l.l.............
	...
  401c48:	00280000 007c0028 00280028 0028007c     ..(.(.|.(.(.|.(.
  401c58:	00000028 00000000 00000000 003c0010     (.............<.
  401c68:	00200040 00080010 00780004 00000010     @. .......x.....
	...
  401c80:	007c0000 00a800a4 00280050 00940054     ..|.....P.(.T...
  401c90:	00000088 00000000 00000000 00900060     ............`...
  401ca0:	00900090 00940060 00880088 00000070     ....`.......p...
	...
  401cb8:	00100010 00000010 00000000 00000000     ................
	...
  401cd4:	00100008 00200020 00200020 00200020     .... . . . . . .
  401ce4:	00080010 00000000 00000000 00100020     ............ ...
  401cf4:	00080008 00080008 00080008 00200010     .............. .
  401d04:	00000000 00280000 007c0010 00280010     ......(...|...(.
	...
  401d2c:	00100010 00fe0010 00100010 00000010     ................
	...
  401d54:	00300010 00000020 00000000 00000000     ..0. ...........
  401d64:	00000000 007c0000 00000000 00000000     ......|.........
	...
  401d88:	00300000 00000030 00000000 00000000     ..0.0...........
  401d98:	00080000 00100008 00200010 00400020     .......... . .@.
  401da8:	00000040 00000000 00000000 00780000     @.............x.
  401db8:	008c0084 00a40094 008400c4 00000078     ............x...
	...
  401dd0:	00100000 00500030 00100010 00100010     ....0.P.........
  401de0:	0000007c 00000000 00000000 00700000     |.............p.
  401df0:	00080088 00200010 00800040 000000f8     ...... .@.......
	...
  401e08:	00700000 00080088 00080030 00880008     ..p.....0.......
  401e18:	00000070 00000000 00000000 00080000     p...............
  401e28:	00280018 00880048 000800fc 00000008     ..(.H...........
	...
  401e40:	00780000 00800080 000800f0 00080008     ..x.............
  401e50:	000000f0 00000000 00000000 00300000     ..............0.
  401e60:	00800040 008800f0 00880088 00000070     @...........p...
	...
  401e78:	00f80000 00100008 00200010 00400020     .......... . .@.
  401e88:	00000040 00000000 00000000 00700000     @.............p.
  401e98:	00880088 00880070 00880088 00000070     ....p.......p...
	...
  401eb0:	00700000 00880088 00780088 00100008     ..p.......x.....
  401ec0:	00000060 00000000 00000000 00000000     `...............
  401ed0:	00300000 00000030 00300000 00000030     ..0.0.....0.0...
	...
  401eec:	00300000 00000030 00300000 00600030     ..0.0.....0.0.`.
  401efc:	00000040 00000000 00000000 00100008     @...............
  401f0c:	00400020 00100020 00000008 00000000      .@. ...........
	...
  401f28:	0000007c 0000007c 00000000 00000000     |...|...........
	...
  401f40:	00200040 00080010 00200010 00000040     @. ....... .@...
	...
  401f58:	00300000 00080048 00200010 00000000     ..0.H..... .....
  401f68:	00000020 00000000 00000000 00000000      ...............
  401f78:	0042003c 00aa009a 00be00aa 00780080     <.B...........x.
	...
  401f90:	00100000 00280028 007c0044 00440044     ....(.(.D.|.D.D.
  401fa0:	00000044 00000000 00000000 00f80000     D...............
  401fb0:	00840084 008400f8 00840084 000000f8     ................
	...
  401fc8:	003c0000 00800040 00800080 00400080     ..<.@.........@.
  401fd8:	0000003c 00000000 00000000 00f00000     <...............
  401fe8:	00840088 00840084 00880084 000000f0     ................
	...
  402000:	00f80000 00800080 008000f0 00800080     ................
  402010:	000000f8 00000000 00000000 00f80000     ................
  402020:	00800080 008000f8 00800080 00000080     ................
	...
  402038:	003c0000 00800040 009c0080 00440084     ..<.@.........D.
  402048:	00000038 00000000 00000000 00880000     8...............
  402058:	00880088 008800f8 00880088 00000088     ................
	...
  402070:	00f80000 00200020 00200020 00200020     .... . . . . . .
  402080:	000000f8 00000000 00000000 00f80000     ................
  402090:	00080008 00080008 00080008 000000f0     ................
	...
  4020a8:	00840000 00900088 00d000a0 00840088     ................
  4020b8:	00000084 00000000 00000000 00800000     ................
  4020c8:	00800080 00800080 00800080 000000fc     ................
	...
  4020e0:	00840000 00cc00cc 00b400b4 00840084     ................
  4020f0:	00000084 00000000 00000000 00840000     ................
  402100:	00c400c4 00a400a4 00940094 0000008c     ................
	...
  402118:	00780000 00840084 00840084 00840084     ..x.............
  402128:	00000078 00000000 00000000 00f80000     x...............
  402138:	00840084 00f80084 00800080 00000080     ................
	...
  402150:	00780000 00840084 00840084 00840084     ..x.............
  402160:	00200078 00000018 00000000 00f80000     x. .............
  402170:	00840084 00f80084 00840088 00000084     ................
	...
  402188:	007c0000 00800080 00180060 00040004     ..|.....`.......
  402198:	000000f8 00000000 00000000 00f80000     ................
  4021a8:	00200020 00200020 00200020 00000020      . . . . . . ...
	...
  4021c0:	00840000 00840084 00840084 00840084     ................
  4021d0:	00000078 00000000 00000000 00840000     x...............
  4021e0:	00840084 00480048 00300048 00000030     ....H.H.H.0.0...
	...
  4021f8:	00880000 00a800a8 00a800a8 005000a8     ..............P.
  402208:	00000050 00000000 00000000 00880000     P...............
  402218:	00500088 00200020 00880050 00000088     ..P. . .P.......
	...
  402230:	00880000 00880088 00500050 00200020     ........P.P. . .
  402240:	00000020 00000000 00000000 00fc0000      ...............
  402250:	00080004 00200010 00800040 000000fc     ...... .@.......
	...
  402268:	00400070 00400040 00400040 00400040     p.@.@.@.@.@.@.@.
  402278:	00400040 00000070 00000000 00400040     @.@.p.......@.@.
  402288:	00200020 00100020 00100010 00080008      . . ...........
	...
  4022a0:	00080038 00080008 00080008 00080008     8...............
  4022b0:	00080008 00000038 00000000 00280010     ....8.........(.
  4022c0:	00000044 00000000 00000000 00000000     D...............
	...
  4022e8:	00000038 00000000 00000000 00200000     8............. .
  4022f8:	00000010 00000000 00000000 00000000     ................
	...
  402314:	00700000 00080008 00880078 0000007c     ..p.....x...|...
	...
  40232c:	00800080 00f80080 00840084 00840084     ................
  40233c:	000000f8 00000000 00000000 00000000     ................
  40234c:	00780000 00800080 00800080 00000078     ..x.........x...
	...
  402364:	00040004 007c0004 00840084 008c0084     ......|.........
  402374:	00000074 00000000 00000000 00000000     t...............
  402384:	00780000 00fc0084 00800080 0000007c     ..x.........|...
	...
  40239c:	0020001c 00fc0020 00200020 00200020     .. . ... . . . .
  4023ac:	000000fc 00000000 00000000 00000000     ................
  4023bc:	007c0000 00840084 00840084 0004007c     ..|.........|...
  4023cc:	00000078 00000000 00800080 00b80080     x...............
  4023dc:	008400c4 00840084 00000084 00000000     ................
  4023ec:	00000000 00100000 00700000 00100010     ..........p.....
  4023fc:	00100010 0000007c 00000000 00000000     ....|...........
  40240c:	00080000 00780000 00080008 00080008     ......x.........
  40241c:	00080008 00700008 00000000 00800080     ......p.........
  40242c:	00880080 00a00090 008800d0 00000088     ................
	...
  402444:	002000e0 00200020 00200020 00200020     .. . . . . . . .
  402454:	000000f8 00000000 00000000 00000000     ................
  402464:	00a40000 00a400fc 00a400a4 000000a4     ................
	...
  402480:	00b80000 008400c4 00840084 00000084     ................
	...
  40249c:	00780000 00840084 00840084 00000078     ..x.........x...
	...
  4024b8:	00b80000 008400c4 00840084 008000f8     ................
  4024c8:	00000080 00000000 00000000 007c0000     ..............|.
  4024d8:	00840084 00840084 0004007c 00000004     ........|.......
	...
  4024f0:	00d80000 00400060 00400040 000000f0     ....`.@.@.@.....
	...
  40250c:	00780000 00400080 00080030 000000f0     ..x...@.0.......
	...
  402528:	00fc0020 00200020 00200020 0000001c      ... . . . .....
	...
  402544:	00880000 00880088 00880088 0000007c     ............|...
	...
  402560:	00840000 00840084 00480048 00000030     ........H.H.0...
	...
  40257c:	00880000 00a800a8 00a800a8 00000050     ............P...
	...
  402598:	00880000 00200050 00500020 00000088     ....P. . .P.....
	...
  4025b4:	00840000 00480084 00300048 00200010     ......H.H.0... .
  4025c4:	00000040 00000000 00000000 00f80000     @...............
  4025d4:	00100008 00400020 000000f8 00000000     .... .@.........
  4025e4:	00000000 00200010 00100020 00200020     ...... . ... . .
  4025f4:	00200010 00100020 00000000 00000000     .. . ...........
  402604:	00100010 00100010 00000000 00100010     ................
  402614:	00100010 00000000 00000000 00100020     ............ ...
  402624:	00200010 00100010 00100020 00200010     .. ..... ..... .
  402634:	00000000 4952414d 0031204f 4952414d     ....MARIO 1.MARI
  402644:	0032204f 00000909                       O 2.....

0040264c <n1>:
  40264c:	00000a4d 00000a4d 00000000 00000a4d     M...M.......M...
  40265c:	00000000 0000082d 00000a4d 00000000     ....-...M.......
  40266c:	00000c40 00000000 00000000 00000000     @...............
  40267c:	00000620 00000000 00000000 00000000      ...............
  40268c:	0000082d 00000000 00000000 00000620     -........... ...
	...
  4026a4:	00000527 00000000 00000000 000006e0     '...............
  4026b4:	00000000 000007b8 00000000 00000749     ............I...
  4026c4:	000006e0 00000000 00000620 00000a4d     ........ ...M...
  4026d4:	00000c40 00000dc0 00000000 00000aea     @...............
  4026e4:	00000c40 00000000 00000a4d 00000000     @.......M.......
  4026f4:	0000082d 0000092d 000007b8 00000000     -...-...........
  402704:	00000000 0000082d 00000000 00000000     ....-...........
  402714:	00000620 00000000 00000000 00000527      ...........'...
	...
  40272c:	000006e0 00000000 000007b8 00000000     ................
  40273c:	00000749 000006e0 00000000 00000620     I........... ...
  40274c:	00000a4d 00000c40 00000dc0 00000000     M...@...........
  40275c:	00000aea 00000c40 00000000 00000a4d     ....@.......M...
  40276c:	00000000 0000082d 0000092d 000007b8     ....-...-.......

0040277c <n2>:
  40277c:	00000106 0000020b 000000dc 000001b8     ................
  40278c:	000000e9 000001d2 00000000 00000000     ................
  40279c:	00000106 0000020b 000000dc 000001b8     ................
  4027ac:	000000e9 000001d2 00000000 00000000     ................
  4027bc:	000000af 0000015d 00000093 00000126     ....].......&...
  4027cc:	0000009c 00000137 00000000 00000000     ....7...........
  4027dc:	000000af 0000015d 00000093 00000126     ....].......&...
  4027ec:	0000009c 00000137 00000000 00000000     ....7...........
  4027fc:	00000137 00000115 00000126 00000115     7.......&.......
  40280c:	00000137 00000137 000000d0 000000c4     7...7...........
  40281c:	00000115 00000106 00000172 0000015d     ........r...]...
  40282c:	000000a5 000001d2 000001b8 0000019f     ................
  40283c:	00000137 000000f7 000000e9 000000dc     7...............
  40284c:	000000d0 00000000 00000000 00000000     ................

0040285c <t1>:
  40285c:	0000000c 0000000c 0000000c 0000000c     ................
  40286c:	0000000c 0000000c 0000000c 0000000c     ................
  40287c:	0000000c 0000000c 0000000c 0000000c     ................
  40288c:	0000000c 0000000c 0000000c 0000000c     ................
  40289c:	0000000c 0000000c 0000000c 0000000c     ................
  4028ac:	0000000c 0000000c 0000000c 0000000c     ................
  4028bc:	0000000c 0000000c 0000000c 0000000c     ................
  4028cc:	0000000c 0000000c 0000000c 0000000c     ................
  4028dc:	00000009 00000009 00000009 0000000c     ................
  4028ec:	0000000c 0000000c 0000000c 0000000c     ................
  4028fc:	0000000c 0000000c 0000000c 0000000c     ................
  40290c:	0000000c 0000000c 0000000c 0000000c     ................
  40291c:	0000000c 0000000c 0000000c 0000000c     ................
  40292c:	0000000c 0000000c 0000000c 0000000c     ................
  40293c:	0000000c 0000000c 0000000c 0000000c     ................
  40294c:	0000000c 0000000c 0000000c 00000009     ................
  40295c:	00000009 00000009 0000000c 0000000c     ................
  40296c:	0000000c 0000000c 0000000c 0000000c     ................
  40297c:	0000000c 0000000c 0000000c 0000000c     ................

0040298c <t2>:
  40298c:	0000000c 0000000c 0000000c 0000000c     ................
  40299c:	0000000c 0000000c 00000006 00000003     ................
  4029ac:	0000000c 0000000c 0000000c 0000000c     ................
  4029bc:	0000000c 0000000c 00000006 00000003     ................
  4029cc:	0000000c 0000000c 0000000c 0000000c     ................
  4029dc:	0000000c 0000000c 00000006 00000003     ................
  4029ec:	0000000c 0000000c 0000000c 0000000c     ................
  4029fc:	0000000c 0000000c 00000006 00000006     ................
  402a0c:	00000012 00000012 00000012 00000006     ................
  402a1c:	00000006 00000006 00000006 00000006     ................
  402a2c:	00000006 00000012 00000012 00000012     ................
  402a3c:	00000012 00000012 00000012 0000000a     ................
  402a4c:	0000000a 0000000a 0000000a 0000000a     ................
  402a5c:	0000000a 00000003 00000003 00000003     ................

00402a6c <_global_impure_ptr>:
  402a6c:	20400020                                 .@ 

00402a70 <_init>:
  402a70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  402a72:	bf00      	nop
  402a74:	bcf8      	pop	{r3, r4, r5, r6, r7}
  402a76:	bc08      	pop	{r3}
  402a78:	469e      	mov	lr, r3
  402a7a:	4770      	bx	lr

00402a7c <__init_array_start>:
  402a7c:	00401ad1 	.word	0x00401ad1

00402a80 <__frame_dummy_init_array_entry>:
  402a80:	00400165                                e.@.

00402a84 <_fini>:
  402a84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  402a86:	bf00      	nop
  402a88:	bcf8      	pop	{r3, r4, r5, r6, r7}
  402a8a:	bc08      	pop	{r3}
  402a8c:	469e      	mov	lr, r3
  402a8e:	4770      	bx	lr

00402a90 <__fini_array_start>:
  402a90:	00400141 	.word	0x00400141

Disassembly of section .relocate:

20400000 <portable_delay_cycles>:
RAMFUNC
void portable_delay_cycles(unsigned long n)
{
	UNUSED(n);

	__asm (
20400000:	f3bf 8f5f 	dmb	sy
20400004:	3801      	subs	r0, #1
20400006:	d1fb      	bne.n	20400000 <portable_delay_cycles>
20400008:	4770      	bx	lr
	...

2040000c <sysfont>:
2040000c:	0000 0000 1bf0 0040 0e0a 7d20               ......@... }

20400018 <g_interrupt_enabled>:
20400018:	0001 0000                                   ....

2040001c <SystemCoreClock>:
2040001c:	0900 003d                                   ..=.

20400020 <impure_data>:
20400020:	0000 0000 030c 2040 0374 2040 03dc 2040     ......@ t.@ ..@ 
	...
204000c8:	0001 0000 0000 0000 330e abcd 1234 e66d     .........3..4.m.
204000d8:	deec 0005 000b 0000 0000 0000 0000 0000     ................
	...

20400448 <__atexit_recursive_mutex>:
20400448:	06f4 2040                                   ..@ 
